/************************************************************/
/*****              SqlDataProvider                     *****/
/*****	    Version 3.1.0 Schema Install Script         *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalAlias]
(
[PortalAliasID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NOT NULL,
[HTTPAlias] [nvarchar] (200) NULL
)

GO

ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] ADD CONSTRAINT [PK_{objectQualifier}PortalAlias] PRIMARY KEY CLUSTERED  ([PortalAliasID])
GO

CREATE procedure {databaseOwner}{objectQualifier}UpdatePortalAliasOnInstall

@PortalAlias nvarchar(200)

as

update {databaseOwner}{objectQualifier}PortalAlias 
set    HTTPAlias = @PortalAlias
where  HTTPAlias = '_default'

GO

CREATE TABLE {databaseOwner}[{objectQualifier}SearchItemWord]
(
[SearchItemWordID] [int] NOT NULL IDENTITY(1, 1),
[SearchItemID] [int] NOT NULL,
[SearchWordsID] [int] NOT NULL,
[Occurrences] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItemWord] ADD CONSTRAINT [PK_{objectQualifier}SearchItemWords] PRIMARY KEY CLUSTERED  ([SearchItemWordID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItemWord
	@SearchItemWordID int
	
AS

SELECT
	[SearchItemWordID],
	[SearchItemID],
	[SearchWordsID],
	[Occurrences]
FROM
	{databaseOwner}{objectQualifier}SearchItemWord
WHERE
	[SearchItemWordID] = @SearchItemWordID

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Folders]
(
[FolderID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NULL,
[FolderPath] [varchar] (300) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD CONSTRAINT [PK_{objectQualifier}Folders] PRIMARY KEY CLUSTERED  ([FolderID])

GO
CREATE TABLE {databaseOwner}[{objectQualifier}FolderPermission]
(
[FolderPermissionID] [int] NOT NULL IDENTITY(1, 1),
[FolderID] [int] NOT NULL,
[PermissionID] [int] NOT NULL,
[RoleID] [int] NOT NULL,
[AllowAccess] [bit] NOT NULL
)

GO

ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] ADD CONSTRAINT [PK_{objectQualifier}FolderPermission] PRIMARY KEY CLUSTERED  ([FolderPermissionID])
GO

CREATE TABLE {databaseOwner}[{objectQualifier}EventLog]
(
[LogGUID] [varchar] (36) NOT NULL,
[LogTypeKey] [nvarchar] (35) NOT NULL,
[LogConfigID] [int] NULL,
[LogUserID] [int] NULL,
[LogUserName] [nvarchar] (50) NULL,
[LogPortalID] [int] NULL,
[LogPortalName] [nvarchar] (100) NULL,
[LogCreateDate] [datetime] NOT NULL,
[LogServerName] [nvarchar] (50) NOT NULL,
[LogProperties] [ntext] NOT NULL,
[LogNotificationPending] [bit] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] ADD CONSTRAINT [PK_EventLogMaster] PRIMARY KEY CLUSTERED  ([LogGUID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteEventLog
	@LogGUID varchar(36)
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLog
WHERE LogGUID = @LogGUID or @LogGUID IS NULL


GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserRoles]
(
[UserRoleID] [int] NOT NULL IDENTITY(1, 1),
[UserID] [int] NOT NULL,
[RoleID] [int] NOT NULL,
[ExpiryDate] [datetime] NULL,
[IsTrialUsed] [bit] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] ADD CONSTRAINT [PK_{objectQualifier}UserRoles] PRIMARY KEY CLUSTERED  ([UserRoleID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRoles_1] ON {databaseOwner}[{objectQualifier}UserRoles] ([UserID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRoles] ON {databaseOwner}[{objectQualifier}UserRoles] ([RoleID])
GO


create procedure {databaseOwner}{objectQualifier}DeleteUserRole

@UserId int,
@RoleId int

as

delete
from {objectQualifier}UserRoles
where  UserId = @UserId
and    RoleId = @RoleId

GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchItem]
(
[SearchItemID] [int] NOT NULL IDENTITY(1, 1),
[Title] [nvarchar] (200) NOT NULL,
[Description] [nvarchar] (2000) NOT NULL,
[Author] [int] NULL,
[PubDate] [datetime] NOT NULL,
[ModuleId] [int] NOT NULL,
[SearchKey] [nvarchar] (100) NOT NULL,
[Guid] [varchar] (200) NULL,
[HitCount] [int] NULL,
[ImageFileId] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItem] ADD CONSTRAINT [PK_{objectQualifier}SearchItem] PRIMARY KEY CLUSTERED  ([SearchItemID])
CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}SearchItem] ON {databaseOwner}[{objectQualifier}SearchItem] ([ModuleId], [SearchKey])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Skins]
(
[SkinID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NULL,
[SkinRoot] [nvarchar] (50) NOT NULL,
[SkinSrc] [nvarchar] (200) NOT NULL,
[SkinType] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Skins] ADD CONSTRAINT [PK_{objectQualifier}Skins] PRIMARY KEY CLUSTERED  ([SkinID])
GO

create procedure {databaseOwner}{objectQualifier}GetSkin

@SkinRoot               nvarchar(50),
@PortalID		int,
@SkinType               int

as
	
select *
from	{objectQualifier}Skins
where   SkinRoot = @SkinRoot
and     SkinType = @SkinType
and     ( PortalID is null or PortalID = @PortalID )
order by PortalID desc








GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules]
(
[PortalDesktopModuleID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NOT NULL,
[DesktopModuleID] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules] ADD CONSTRAINT [PK_{objectQualifier}PortalDesktopModules] PRIMARY KEY CLUSTERED  ([PortalDesktopModuleID])
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddFolderPermission
	@FolderID int,
	@PermissionID int,
	@RoleID int,
	@AllowAccess bit
AS

INSERT INTO {databaseOwner}{objectQualifier}FolderPermission (
	[FolderID],
	[PermissionID],
	[RoleID],
	[AllowAccess]
) VALUES (
	@FolderID,
	@PermissionID,
	@RoleID,
	@AllowAccess
)

select SCOPE_IDENTITY()








GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventLogConfig]
(
[ID] [int] NOT NULL IDENTITY(1, 1),
[LogTypeKey] [nvarchar] (35) NULL,
[LogTypePortalID] [int] NULL,
[LoggingIsActive] [bit] NOT NULL,
[KeepMostRecent] [int] NOT NULL,
[EmailNotificationIsActive] [bit] NOT NULL,
[NotificationThreshold] [int] NULL,
[NotificationThresholdTime] [int] NULL,
[NotificationThresholdTimeType] [int] NULL,
[MailFromAddress] [nvarchar] (50) NOT NULL,
[MailToAddress] [nvarchar] (50) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLogConfig] ADD CONSTRAINT [PK_EventLogConfig] PRIMARY KEY CLUSTERED  ([ID])
CREATE UNIQUE NONCLUSTERED INDEX [LogTypeKey_LogTypePortalID] ON {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchIndexer]
(
[SearchIndexerID] [int] NOT NULL IDENTITY(1, 1),
[SearchIndexerAssemblyQualifiedName] [char] (200) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchIndexer] ADD CONSTRAINT [PK_{objectQualifier}SearchIndexer] PRIMARY KEY CLUSTERED  ([SearchIndexerID])
GO

create procedure {databaseOwner}{objectQualifier}GetSearchIndexers

as

select {objectQualifier}SearchIndexer.*
from {objectQualifier}SearchIndexer








GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchItemWordPosition]
(
[SearchItemWordPositionID] [int] NOT NULL IDENTITY(1, 1),
[SearchItemWordID] [int] NOT NULL,
[ContentPosition] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItemWordPosition] ADD CONSTRAINT [PK_{objectQualifier}SearchItemWordPosition] PRIMARY KEY CLUSTERED  ([SearchItemWordPositionID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}ListSearchItemWordPosition
AS

SELECT
	[SearchItemWordPositionID],
	[SearchItemWordID],
	[ContentPosition]
FROM
	{databaseOwner}{objectQualifier}SearchItemWordPosition







GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabPermission]
(
[TabPermissionID] [int] NOT NULL IDENTITY(1, 1),
[TabID] [int] NOT NULL,
[PermissionID] [int] NOT NULL,
[RoleID] [int] NOT NULL,
[AllowAccess] [bit] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] ADD CONSTRAINT [PK_{objectQualifier}TabPermission] PRIMARY KEY CLUSTERED  ([TabPermissionID])
GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteTabPermission
	@TabPermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}TabPermission
WHERE
	[TabPermissionID] = @TabPermissionID







GO


CREATE procedure {databaseOwner}{objectQualifier}GetPortalAlias

@HTTPAlias nvarchar(200),
@PortalID int

as

select *
from {databaseOwner}{objectQualifier}PortalAlias
where HTTPAlias = @HTTPAlias 
and PortalID = @PortalID









GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleSettings]
(
[ModuleID] [int] NOT NULL,
[SettingName] [nvarchar] (50) NOT NULL,
[SettingValue] [nvarchar] (2000) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleSettings] ADD CONSTRAINT [PK_{objectQualifier}ModuleSettings] PRIMARY KEY CLUSTERED  ([ModuleID], [SettingName])
GO

create procedure {databaseOwner}{objectQualifier}AddModuleSetting

@ModuleId      int,
@SettingName   nvarchar(50),
@SettingValue  nvarchar(2000)

as

insert into {objectQualifier}ModuleSettings ( 
  ModuleId, 
  SettingName, 
  SettingValue 
) 
values ( 
  @ModuleId, 
  @SettingName, 
  @SettingValue 
)


GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventLogTypes]
(
[LogTypeKey] [nvarchar] (35) NOT NULL,
[LogTypeFriendlyName] [nvarchar] (50) NOT NULL,
[LogTypeDescription] [nvarchar] (128) NOT NULL,
[LogTypeOwner] [nvarchar] (100) NOT NULL,
[LogTypeCSSClass] [nvarchar] (40) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLogTypes] ADD CONSTRAINT [PK_EventLogTypes] PRIMARY KEY CLUSTERED  ([LogTypeKey])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Files]
(
[FileId] [int] NOT NULL IDENTITY(1, 1),
[PortalId] [int] NULL,
[FileName] [nvarchar] (100) NOT NULL,
[Extension] [nvarchar] (100) NOT NULL,
[Size] [int] NOT NULL,
[Width] [int] NULL,
[Height] [int] NULL,
[ContentType] [nvarchar] (200) NOT NULL,
[Folder] [nvarchar] (200) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD CONSTRAINT [PK_{objectQualifier}File] PRIMARY KEY CLUSTERED  ([FileId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Files] ON {databaseOwner}[{objectQualifier}Files] ([PortalId])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchCommonWords]
(
[CommonWordID] [int] NOT NULL IDENTITY(1, 1),
[CommonWord] [nvarchar] (255) NOT NULL,
[Locale] [nvarchar] (10) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchCommonWords] ADD CONSTRAINT [PK_{objectQualifier}SearchCommonWords] PRIMARY KEY CLUSTERED  ([CommonWordID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSearchCommonWord
	@CommonWord nvarchar(255),
	@Locale nvarchar(10)
AS

INSERT INTO {databaseOwner}{objectQualifier}SearchCommonWords (
	[CommonWord],
	[Locale]
) VALUES (
	@CommonWord,
	@Locale
)

select SCOPE_IDENTITY()







GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModulePermission]
(
[ModulePermissionID] [int] NOT NULL IDENTITY(1, 1),
[ModuleID] [int] NOT NULL,
[PermissionID] [int] NOT NULL,
[RoleID] [int] NOT NULL,
[AllowAccess] [bit] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] ADD CONSTRAINT [PK_{objectQualifier}ModulePermission] PRIMARY KEY CLUSTERED  ([ModulePermissionID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ScheduleHistory]
(
[ScheduleHistoryID] [int] NOT NULL IDENTITY(1, 1),
[ScheduleID] [int] NOT NULL,
[StartDate] [datetime] NOT NULL,
[EndDate] [datetime] NULL,
[Succeeded] [bit] NULL,
[LogNotes] [ntext] NULL,
[NextStart] [datetime] NULL,
[Server] [nvarchar] (150) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleHistory] ADD CONSTRAINT [PK_{objectQualifier}ScheduleHistory] PRIMARY KEY CLUSTERED  ([ScheduleHistoryID])
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddFolder
	@PortalID int,
	@FolderPath varchar(300)
AS
	IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Folders WHERE PortalID = @PortalID and FolderPath = @FolderPath)
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Folders
		(PortalID, FolderPath)
		VALUES
		(@PortalID, @FolderPath)
		
		SELECT SCOPE_IDENTITY()
	END







GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalAliasByPortalAliasID

@PortalAliasID int

as

select *
from {databaseOwner}{objectQualifier}PortalAlias
where PortalAliasID = @PortalAliasID








GO
CREATE TABLE {databaseOwner}[{objectQualifier}Schedule]
(
[ScheduleID] [int] NOT NULL IDENTITY(1, 1),
[TypeFullName] [varchar] (200) NOT NULL,
[TimeLapse] [int] NOT NULL,
[TimeLapseMeasurement] [varchar] (2) NOT NULL,
[RetryTimeLapse] [int] NOT NULL,
[RetryTimeLapseMeasurement] [varchar] (2) NOT NULL,
[RetainHistoryNum] [int] NOT NULL,
[AttachToEvent] [varchar] (50) NOT NULL,
[CatchUpEnabled] [bit] NOT NULL,
[Enabled] [bit] NOT NULL,
[ObjectDependencies] [varchar] (300) NOT NULL,
[Servers] [nvarchar] (150) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Schedule] ADD CONSTRAINT [PK_{objectQualifier}Schedule] PRIMARY KEY CLUSTERED  ([ScheduleID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSchedule
@ScheduleID int
AS
DELETE FROM {databaseOwner}{objectQualifier}Schedule
WHERE ScheduleID = @ScheduleID







GO
CREATE TABLE {databaseOwner}[{objectQualifier}Permission]
(
[PermissionID] [int] NOT NULL IDENTITY(1, 1),
[PermissionCode] [varchar] (50) NOT NULL,
[ModuleDefID] [int] NOT NULL,
[PermissionKey] [varchar] (20) NOT NULL,
[PermissionName] [varchar] (50) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Permission] ADD CONSTRAINT [PK_{objectQualifier}Permission] PRIMARY KEY CLUSTERED  ([PermissionID])
GO

create procedure {databaseOwner}{objectQualifier}GetTables

as

/* Be carefull when changing this procedure as the GetSearchTables() function 
   in SearchDB.vb is only looking at the first column (to support databases that cannot return 
   a TableName column name (like MySQL))
*/

select 'TableName' = [name]
from   sysobjects 
where  xtype = 'U' 








GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleControls]
(
[ModuleControlID] [int] NOT NULL IDENTITY(1, 1),
[ModuleDefID] [int] NULL,
[ControlKey] [nvarchar] (50) NULL,
[ControlTitle] [nvarchar] (50) NULL,
[ControlSrc] [nvarchar] (256) NULL,
[IconFile] [nvarchar] (100) NULL,
[ControlType] [int] NOT NULL,
[ViewOrder] [int] NULL,
[HelpUrl] [nvarchar] (200) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] ADD CONSTRAINT [PK_{objectQualifier}ModuleControls] PRIMARY KEY CLUSTERED  ([ModuleControlID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Affiliates]
(
[AffiliateId] [int] NOT NULL IDENTITY(1, 1),
[VendorId] [int] NULL,
[StartDate] [datetime] NULL,
[EndDate] [datetime] NULL,
[CPC] [float] NOT NULL,
[Clicks] [int] NOT NULL,
[CPA] [float] NOT NULL,
[Acquisitions] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Affiliates] ADD CONSTRAINT [PK_{objectQualifier}Affiliates] PRIMARY KEY CLUSTERED  ([AffiliateId])
GO

create procedure {databaseOwner}{objectQualifier}UpdateAffiliateStats

@AffiliateId  int,
@Clicks       int,
@Acquisitions int

as

update {objectQualifier}Affiliates
set    Clicks = Clicks + @Clicks,
       Acquisitions = Acquisitions + @Acquisitions
where  VendorId = @AffiliateId 
and    ( StartDate < getdate() or StartDate is null ) 
and    ( EndDate > getdate() or EndDate is null )








GO
CREATE TABLE {databaseOwner}[{objectQualifier}SiteLog]
(
[SiteLogId] [int] NOT NULL IDENTITY(1, 1),
[DateTime] [smalldatetime] NOT NULL,
[PortalId] [int] NOT NULL,
[UserId] [int] NULL,
[Referrer] [nvarchar] (255) NULL,
[Url] [nvarchar] (255) NULL,
[UserAgent] [nvarchar] (255) NULL,
[UserHostAddress] [nvarchar] (255) NULL,
[UserHostName] [nvarchar] (255) NULL,
[TabId] [int] NULL,
[AffiliateId] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SiteLog] ADD CONSTRAINT [PK_{objectQualifier}SiteLog] PRIMARY KEY CLUSTERED  ([SiteLogId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}SiteLog] ON {databaseOwner}[{objectQualifier}SiteLog] ([PortalId])
GO


create procedure {databaseOwner}{objectQualifier}GetSiteLog1

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select 'Date' = convert(varchar,DateTime,102),
 'Views' = count(*),
 'Visitors' = count(distinct {objectQualifier}SiteLog.UserHostAddress),
 'Users' = count(distinct {objectQualifier}SiteLog.UserId)
from {objectQualifier}SiteLog
where PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by convert(varchar,DateTime,102)
order by Date desc








GO
CREATE TABLE {databaseOwner}[{objectQualifier}UrlLog]
(
[UrlLogID] [int] NOT NULL IDENTITY(1, 1),
[UrlTrackingID] [int] NOT NULL,
[ClickDate] [datetime] NOT NULL,
[UserID] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlLog] ADD CONSTRAINT [PK_{objectQualifier}UrlLog] PRIMARY KEY CLUSTERED  ([UrlLogID])
GO

create procedure {databaseOwner}{objectQualifier}AddUrlLog

@UrlTrackingID int,
@UserID        int

as

insert into {objectQualifier}UrlLog (
  UrlTrackingID,
  ClickDate,
  UserID
)
values (
  @UrlTrackingID,
  getdate(),
  @UserID
)








GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSchedule
	@Server varchar(150)
AS
SELECT S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, SH.NextStart, S.Servers
FROM {objectQualifier}Schedule S
LEFT JOIN {objectQualifier}ScheduleHistory SH
ON S.ScheduleID = SH.ScheduleID
WHERE (SH.ScheduleHistoryID = (SELECT TOP 1 S1.ScheduleHistoryID FROM {objectQualifier}ScheduleHistory S1 WHERE S1.ScheduleID = S.ScheduleID ORDER BY S1.NextStart DESC)
OR  SH.ScheduleHistoryID IS NULL)
AND (@Server IS NULL or S.Servers LIKE ',%' + @Server + '%,' or S.Servers IS NULL)
GROUP BY S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, SH.NextStart, S.Servers


GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchWord]
(
[SearchWordsID] [int] NOT NULL IDENTITY(1, 1),
[Word] [nvarchar] (100) NOT NULL,
[IsCommon] [bit] NULL,
[HitCount] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchWord] ADD CONSTRAINT [PK_{objectQualifier}SearchWord] PRIMARY KEY CLUSTERED  ([SearchWordsID])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchWordByID
	@SearchWordsID int
	
AS

SELECT
	[SearchWordsID],
	[Word],
	[IsCommon],
	[HitCount]
FROM
	{databaseOwner}{objectQualifier}SearchWord
WHERE
	[SearchWordsID] = @SearchWordsID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleByTypeFullName
@TypeFullName varchar(200)
AS
SELECT S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, S.Servers
FROM {objectQualifier}Schedule S
WHERE S.TypeFullName = @TypeFullName
GROUP BY S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, S.Servers

GO

create procedure {databaseOwner}{objectQualifier}AddSiteLog

@DateTime                      datetime, 
@PortalId                      int,
@UserId                        int                   = null,
@Referrer                      nvarchar(255)         = null,
@Url                           nvarchar(255)         = null,
@UserAgent                     nvarchar(255)         = null,
@UserHostAddress               nvarchar(255)         = null,
@UserHostName                  nvarchar(255)         = null,
@TabId                         int                   = null,
@AffiliateId                   int                   = null

as
 
declare @SiteLogHistory int

insert into {objectQualifier}SiteLog ( 
  DateTime,
  PortalId,
  UserId,
  Referrer,
  Url,
  UserAgent,
  UserHostAddress,
  UserHostName,
  TabId,
  AffiliateId
)
values (
  @DateTime,
  @PortalId,
  @UserId,
  @Referrer,
  @Url,
  @UserAgent,
  @UserHostAddress,
  @UserHostName,
  @TabId,
  @AffiliateId
)








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeletePermission
	@PermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}Permission
WHERE
	[PermissionID] = @PermissionID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSchedule
@ScheduleID int
,@TypeFullName varchar(200)
,@TimeLapse int
,@TimeLapseMeasurement varchar(2)
,@RetryTimeLapse int
,@RetryTimeLapseMeasurement varchar(2)
,@RetainHistoryNum int
,@AttachToEvent varchar(50)
,@CatchUpEnabled bit
,@Enabled bit
,@ObjectDependencies varchar(300)
,@Servers varchar(150)
AS
UPDATE {databaseOwner}{objectQualifier}Schedule
SET TypeFullName = @TypeFullName
,TimeLapse = @TimeLapse
,TimeLapseMeasurement = @TimeLapseMeasurement
,RetryTimeLapse = @RetryTimeLapse
,RetryTimeLapseMeasurement = @RetryTimeLapseMeasurement
,RetainHistoryNum = @RetainHistoryNum
,AttachToEvent = @AttachToEvent
,CatchUpEnabled = @CatchUpEnabled
,Enabled = @Enabled
,ObjectDependencies = @ObjectDependencies
,Servers = @Servers
WHERE ScheduleID = @ScheduleID


GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteModulePermissionsByModuleID
	@ModuleID int
AS

DELETE FROM {databaseOwner}{objectQualifier}ModulePermission
WHERE
	[ModuleID] = @ModuleID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTabPermission
	@TabPermissionID int
AS

SELECT
	[TabPermissionID],
	[TabID],
	[PermissionID],
	[RoleID],
	[AllowAccess]
FROM
	{databaseOwner}{objectQualifier}TabPermission
WHERE
	[TabPermissionID] = @TabPermissionID








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSearchCommonWord
	@CommonWordID int, 
	@CommonWord nvarchar(255), 
	@Locale nvarchar(10) 
AS

UPDATE {databaseOwner}{objectQualifier}SearchCommonWords SET
	[CommonWord] = @CommonWord,
	[Locale] = @Locale
WHERE
	[CommonWordID] = @CommonWordID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSchedule
@TypeFullName varchar(200)
,@TimeLapse int
,@TimeLapseMeasurement varchar(2)
,@RetryTimeLapse int
,@RetryTimeLapseMeasurement varchar(2)
,@RetainHistoryNum int
,@AttachToEvent varchar(50)
,@CatchUpEnabled bit
,@Enabled bit
,@ObjectDependencies varchar(300)
,@Servers varchar(150)
AS
INSERT INTO {objectQualifier}Schedule
(TypeFullName
,TimeLapse
,TimeLapseMeasurement
,RetryTimeLapse
,RetryTimeLapseMeasurement
,RetainHistoryNum
,AttachToEvent
,CatchUpEnabled
,Enabled
,ObjectDependencies
,Servers
)
VALUES
(@TypeFullName
,@TimeLapse
,@TimeLapseMeasurement
,@RetryTimeLapse
,@RetryTimeLapseMeasurement
,@RetainHistoryNum
,@AttachToEvent
,@CatchUpEnabled
,@Enabled
,@ObjectDependencies
,@Servers
)


select SCOPE_IDENTITY()


GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSearchCommonWord
	@CommonWordID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[CommonWordID] = @CommonWordID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateTabPermission
	@TabPermissionID int, 
	@TabID int, 
	@PermissionID int, 
	@RoleID int ,
	@AllowAccess bit
AS

UPDATE {databaseOwner}{objectQualifier}TabPermission SET
	[TabID] = @TabID,
	[PermissionID] = @PermissionID,
	[RoleID] = @RoleID,
	[AllowAccess] = @AllowAccess
WHERE
	[TabPermissionID] = @TabPermissionID








GO
CREATE TABLE {databaseOwner}[{objectQualifier}VendorClassification]
(
[VendorClassificationId] [int] NOT NULL IDENTITY(1, 1),
[VendorId] [int] NOT NULL,
[ClassificationId] [int] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}VendorClassification] ADD CONSTRAINT [PK_{objectQualifier}VendorClassification] PRIMARY KEY CLUSTERED  ([VendorClassificationId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}VendorClassification_1] ON {databaseOwner}[{objectQualifier}VendorClassification] ([ClassificationId])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SystemMessages]
(
[MessageID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NULL,
[MessageName] [nvarchar] (50) NOT NULL,
[MessageValue] [ntext] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}SystemMessages] ADD CONSTRAINT [PK_{objectQualifier}SystemMessages] PRIMARY KEY CLUSTERED  ([MessageID])
GO

create procedure {databaseOwner}{objectQualifier}AddSystemMessage

@PortalID     int,
@MessageName  nvarchar(50),
@MessageValue ntext

as

insert into {objectQualifier}SystemMessages (
  PortalID,
  MessageName,
  MessageValue
)
values (
  @PortalID,
  @MessageName,
  @MessageValue
)








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItemWordBySearchWord
	@SearchWordsID int
AS

SELECT
	[SearchItemWordID],
	[SearchItemID],
	[SearchWordsID],
	[Occurrences]
FROM
	{databaseOwner}{objectQualifier}SearchItemWord
WHERE
	[SearchWordsID]=@SearchWordsID







GO



CREATE procedure {databaseOwner}{objectQualifier}GetFile

@FileName  nvarchar(100),
@PortalId  int,
@Folder nvarchar(200)

as

select FileId,
       FileName,
       Extension,
       Size,
       WIdth,
       Height,
       ContentType
from {objectQualifier}Files
where  FileName = @FileName AND Folder=@Folder
and    ((PortalId = @PortalId) or (@PortalId is null and PortalId is null))







GO
CREATE TABLE {databaseOwner}[{objectQualifier}Profile]
(
[ProfileId] [int] NOT NULL IDENTITY(1, 1),
[UserId] [int] NOT NULL,
[PortalId] [int] NOT NULL,
[ProfileData] [ntext] NOT NULL,
[CreatedDate] [datetime] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Profile] ADD CONSTRAINT [PK_{objectQualifier}Profile] PRIMARY KEY CLUSTERED  ([ProfileId])
CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}Profile] ON {databaseOwner}[{objectQualifier}Profile] ([UserId], [PortalId])
GO

create procedure {databaseOwner}{objectQualifier}AddUserRole

@PortalId   int,
@UserId     int,
@RoleId     int,
@ExpiryDate datetime = null

as

declare @UserRoleId int

select @UserRoleId = null

select @UserRoleId = UserRoleId
from   {objectQualifier}UserRoles
where  UserId = @UserId
and    RoleId = @RoleId
 
if @UserRoleId is not null
begin
  update {objectQualifier}UserRoles
  set    ExpiryDate = @ExpiryDate
  where  UserRoleId = @UserRoleId

  select @UserRoleId
end
else
begin
  insert into {objectQualifier}UserRoles (
    UserId,
    RoleId,
    ExpiryDate
  )
  values (
    @UserId,
    @RoleId,
    @ExpiryDate
  )

  select SCOPE_IDENTITY()
end






GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteEventLogType
	@LogTypeKey nvarchar(35)
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLogTypes
WHERE	LogTypeKey = @LogTypeKey
	

GO
CREATE TABLE {databaseOwner}[{objectQualifier}Version]
(
[VersionId] [int] NOT NULL IDENTITY(1, 1),
[Major] [int] NOT NULL,
[Minor] [int] NOT NULL,
[Build] [int] NOT NULL,
[CreatedDate] [datetime] NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Version] ADD CONSTRAINT [PK_{objectQualifier}Version] PRIMARY KEY CLUSTERED  ([VersionId])
GO

create procedure {databaseOwner}{objectQualifier}GetDatabaseVersion

as

select Major,
       Minor,
       Build
from   {objectQualifier}Version 
where  VersionId = ( select max(VersionId) from {objectQualifier}Version )








GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabModuleSettings]
(
[TabModuleID] [int] NOT NULL,
[SettingName] [nvarchar] (50) NOT NULL,
[SettingValue] [nvarchar] (2000) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModuleSettings] ADD CONSTRAINT [PK_{objectQualifier}TabModuleSettings] PRIMARY KEY CLUSTERED  ([TabModuleID], [SettingName])
GO

create procedure {databaseOwner}{objectQualifier}GetTabModuleSetting

@TabModuleId int,
@SettingName nvarchar(50)

as

select SettingName,
       SettingValue
from   {objectQualifier}TabModuleSettings 
where  TabModuleId = @TabModuleId
and    SettingName = @SettingName








GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog5

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select'UserAgent' = 
 case 
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {objectQualifier}SiteLog.UserAgent
 end,
 'Requests' = count(*),
 'LastRequest' = max(DateTime)
from {objectQualifier}SiteLog
where PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by case 
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {objectQualifier}SiteLog.UserAgent
 end
order by Requests desc








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSearchItemWordPosition
	@SearchItemWordPositionID int, 
	@SearchItemWordID int, 
	@ContentPosition int 
AS

UPDATE {databaseOwner}{objectQualifier}SearchItemWordPosition SET
	[SearchItemWordID] = @SearchItemWordID,
	[ContentPosition] = @ContentPosition
WHERE
	[SearchItemWordPositionID] = @SearchItemWordPositionID







GO

create procedure {databaseOwner}{objectQualifier}AddTabModuleSetting

@TabModuleId   int,
@SettingName   nvarchar(50),
@SettingValue  nvarchar(2000)

as

insert into {objectQualifier}TabModuleSettings ( 
  TabModuleId,
  SettingName, 
  SettingValue 
) 
values ( 
  @TabModuleId,
  @SettingName, 
  @SettingValue 
)








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLogPendingNotifConfig
AS

SELECT 	COUNT(*) as PendingNotifs,
	elc.ID,
	elc.LogTypeKey, 
	elc.LogTypePortalID, 
	elc.LoggingIsActive,
	elc.KeepMostRecent,
	elc.EmailNotificationIsActive,
	elc.NotificationThreshold,
	elc.NotificationThresholdTime,
	elc.NotificationThresholdTimeType,
	elc.MailToAddress, 
	elc.MailFromAddress
FROM {databaseOwner}{objectQualifier}EventLogConfig elc
INNER JOIN {databaseOwner}{objectQualifier}EventLog
ON {databaseOwner}{objectQualifier}EventLog.LogConfigID = elc.ID
WHERE {databaseOwner}{objectQualifier}EventLog.LogNotificationPending = 1
GROUP BY elc.ID,
	elc.LogTypeKey, 
	elc.LogTypePortalID, 
	elc.LoggingIsActive,
	elc.KeepMostRecent,
	elc.EmailNotificationIsActive,
	elc.NotificationThreshold,
	elc.NotificationThresholdTime,
	elc.NotificationThresholdTimeType,
	elc.MailToAddress, 
	elc.MailFromAddress

GO

create procedure {databaseOwner}{objectQualifier}GetTabModuleSettings

@TabModuleId int

as

select SettingName,
       SettingValue
from   {objectQualifier}TabModuleSettings 
where  TabModuleId = @TabModuleId








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteEventLogConfig
	@ID int
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLogConfig
WHERE ID = @ID


GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLog
	@PortalID int,
	@LogTypeKey nvarchar(35)
AS
SELECT {databaseOwner}{objectQualifier}EventLog.*
FROM {databaseOwner}{objectQualifier}EventLog
INNER JOIN {databaseOwner}{objectQualifier}EventLogConfig
ON {databaseOwner}{objectQualifier}EventLog.LogConfigID = {databaseOwner}{objectQualifier}EventLogConfig.ID
WHERE (LogPortalID = @PortalID or @PortalID IS NULL)
AND ({databaseOwner}{objectQualifier}EventLog.LogTypeKey = @LogTypeKey or @LogTypeKey IS NULL)
ORDER BY LogCreateDate DESC


GO

create procedure {databaseOwner}{objectQualifier}FindDatabaseVersion

@Major  int,
@Minor  int,
@Build  int

as

select 1
from   {objectQualifier}Version
where  Major = @Major
and    Minor = @Minor
and    Build = @Build








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSearchItemWord
	@SearchItemWordID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchItemWord
WHERE
	[SearchItemWordID] = @SearchItemWordID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItemWordBySearchItem
	@SearchItemID int
AS

SELECT
	[SearchItemWordID],
	[SearchItemID],
	[SearchWordsID],
	[Occurrences]
FROM
	{databaseOwner}{objectQualifier}SearchItemWord
WHERE
	[SearchItemID]=@SearchItemID







GO
CREATE TABLE {databaseOwner}[{objectQualifier}Urls]
(
[UrlID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NULL,
[Url] [nvarchar] (255) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Urls] ADD CONSTRAINT [PK_{objectQualifier}Urls] PRIMARY KEY CLUSTERED  ([UrlID])
GO

create procedure {databaseOwner}{objectQualifier}DeleteUrl

@PortalID     int,
@Url          nvarchar(255)

as

delete
from   {objectQualifier}Urls
where  PortalID = @PortalID
and    Url = @Url








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleByScheduleID
@ScheduleID int
AS
SELECT S.*
FROM {databaseOwner}{objectQualifier}Schedule S
WHERE S.ScheduleID = @ScheduleID








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateEventLogType
	@LogTypeKey nvarchar(35),
	@LogTypeFriendlyName nvarchar(50),
	@LogTypeDescription nvarchar(128),
	@LogTypeOwner nvarchar(100),
	@LogTypeCSSClass nvarchar(40)
AS
UPDATE {databaseOwner}{objectQualifier}EventLogTypes
	SET LogTypeFriendlyName = @LogTypeFriendlyName,
	LogTypeDescription = @LogTypeDescription,
	LogTypeOwner = @LogTypeOwner,
	LogTypeCSSClass = @LogTypeCSSClass
WHERE	LogTypeKey = @LogTypeKey
	

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSearchItemWord
	@SearchItemWordID int, 
	@SearchItemID int, 
	@SearchWordsID int, 
	@Occurrences int 
AS

UPDATE {databaseOwner}{objectQualifier}SearchItemWord SET
	[SearchItemID] = @SearchItemID,
	[SearchWordsID] = @SearchWordsID,
	[Occurrences] = @Occurrences
WHERE
	[SearchItemWordID] = @SearchItemWordID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSearchItem
	@SearchItemID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchItem
WHERE
	[SearchItemID] = @SearchItemID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchWords
AS

SELECT
	[SearchWordsID],
	[Word],
	[HitCount]
FROM
	{databaseOwner}{objectQualifier}SearchWord







GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog8

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select 'Month' = datepart(month,DateTime),
 'Views' = count(*),
 'Visitors' = count(distinct {objectQualifier}SiteLog.UserHostAddress),
 'Users' = count(distinct {objectQualifier}SiteLog.UserId)
from {objectQualifier}SiteLog
where PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(month,DateTime)
order by Month








GO

create procedure {databaseOwner}{objectQualifier}AddAffiliate

@VendorId      int,
@StartDate     datetime,
@EndDate       datetime,
@CPC           float,
@CPA           float

as

insert into {objectQualifier}Affiliates (
    VendorId,
    StartDate,
    EndDate,
    CPC,
    Clicks,
    CPA,
    Acquisitions
)
values (
    @VendorId,
    @StartDate,
    @EndDate,
    @CPC,
    0,
    @CPA,
    0
)

select SCOPE_IDENTITY()








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateFolder
	@PortalID int,
	@FolderID int,
	@FolderPath varchar(300)
AS
	UPDATE {databaseOwner}{objectQualifier}Folders
	SET FolderPath = @FolderPath
	WHERE ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))
	AND FolderID = @FolderID








GO

create procedure {databaseOwner}{objectQualifier}GetAllProfiles
AS
SELECT * FROM {objectQualifier}Profile



GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLogByLogGUID
	@LogGUID varchar(36)
AS
SELECT *
FROM {databaseOwner}{objectQualifier}EventLog
WHERE (LogGUID = @LogGUID)


GO
CREATE TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings]
(
[ScheduleID] [int] NOT NULL,
[SettingName] [nvarchar] (50) NOT NULL,
[SettingValue] [nvarchar] (256) NOT NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings] ADD CONSTRAINT [PK_{objectQualifier}ScheduleItemSettings] PRIMARY KEY CLUSTERED  ([ScheduleID], [SettingName])
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateSearchWord
	@SearchWordsID int, 
	@Word nvarchar(100), 
	@IsCommon bit, 
	@HitCount int 
AS

UPDATE {databaseOwner}{objectQualifier}SearchWord SET
	[Word] = @Word,
	[IsCommon] = @IsCommon,
	[HitCount] = @HitCount
WHERE
	[SearchWordsID] = @SearchWordsID







GO



CREATE procedure {databaseOwner}{objectQualifier}GetFiles

@PortalId   int,
@Folder nvarchar(200)
as

select FileId,
       PortalId,
       FileName,
       Extension,
       Size,
       WIdth,
       Height,
       ContentType
from {objectQualifier}Files
where  ((PortalId = @PortalId AND Folder=@Folder) or (@PortalId is null and PortalId is null AND Folder=@Folder))
order by FileName







GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog4

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select Referrer,
 'Requests' = count(*),
 'LastRequest' = max(DateTime)
from {objectQualifier}SiteLog
where {objectQualifier}SiteLog.PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and Referrer is not null
and Referrer not like '%' + @PortalAlias + '%'
group by Referrer
order by Requests desc








GO

create procedure {databaseOwner}{objectQualifier}DeleteModuleControl

@ModuleControlId int

as

delete
from   {objectQualifier}ModuleControls
where  ModuleControlId = @ModuleControlId








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItemWordPositionBySearchItemWord
	@SearchItemWordID int
AS

SELECT
	[SearchItemWordPositionID],
	[SearchItemWordID],
	[ContentPosition]
FROM
	{databaseOwner}{objectQualifier}SearchItemWordPosition
WHERE
	[SearchItemWordID]=@SearchItemWordID







GO

create procedure {databaseOwner}{objectQualifier}DeleteSkin

@SkinRoot               nvarchar(50),
@PortalID		int,
@SkinType               int

as

delete
from   {objectQualifier}Skins
where   SkinRoot = @SkinRoot
and     SkinType = @SkinType
and    ((PortalID is null and @PortalID is null) or (PortalID = @PortalID))








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSearchWord
	@SearchWordsID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchWord
WHERE
	[SearchWordsID] = @SearchWordsID







GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddScheduleHistory
@ScheduleID int,
@StartDate datetime,
@Server varchar(150)
AS
INSERT INTO {databaseOwner}{objectQualifier}ScheduleHistory
(ScheduleID,
StartDate,
Server)
VALUES
(@ScheduleID,
@StartDate,
@Server)

select SCOPE_IDENTITY()

GO

create procedure {databaseOwner}{objectQualifier}GetFileById

@FileId   int,
@PortalId int

as

select *
from   {objectQualifier}Files
where  FileId = @FileId
and    ((PortalId = @PortalId) or (@PortalId is null and PortalId is null))







GO

create procedure {databaseOwner}{objectQualifier}GetSystemMessages

as

select MessageName
from   {objectQualifier}SystemMessages
where  PortalID is null








GO

CREATE  procedure {databaseOwner}{objectQualifier}UpdateModuleControl

@ModuleControlId               int,
@ModuleDefID                   int,
@ControlKey                    nvarchar(50),
@ControlTitle                  nvarchar(50),
@ControlSrc                    nvarchar(256),
@IconFile                      nvarchar(100),
@ControlType                   int,
@ViewOrder                     int,
@HelpUrl                       nvarchar(200)

as

update {objectQualifier}ModuleControls
set    ModuleDefId       = @ModuleDefId,
       ControlKey        = @ControlKey,
       ControlTitle      = @ControlTitle,
       ControlSrc        = @ControlSrc,
       IconFile          = @IconFile,
       ControlType       = @ControlType,
       ViewOrder         = ViewOrder,
       HelpUrl           = @HelpUrl
where  ModuleControlId = @ModuleControlId








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddTabPermission
	@TabID int,
	@PermissionID int,
	@RoleID int,
	@AllowAccess bit
AS

INSERT INTO {databaseOwner}{objectQualifier}TabPermission (
	[TabID],
	[PermissionID],
	[RoleID],
	[AllowAccess]
) VALUES (
	@TabID,
	@PermissionID,
	@RoleID,
	@AllowAccess
)

select SCOPE_IDENTITY()








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItemWordPosition
	@SearchItemWordPositionID int
	
AS

SELECT
	[SearchItemWordPositionID],
	[SearchItemWordID],
	[ContentPosition]
FROM
	{databaseOwner}{objectQualifier}SearchItemWordPosition
WHERE
	[SearchItemWordPositionID] = @SearchItemWordPositionID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}PurgeScheduleHistory
AS
DELETE FROM {databaseOwner}{objectQualifier}ScheduleHistory
FROM {databaseOwner}{objectQualifier}Schedule s
WHERE
    (
    SELECT COUNT(*)
    FROM {databaseOwner}{objectQualifier}ScheduleHistory sh
    WHERE
        sh.ScheduleID = {databaseOwner}{objectQualifier}ScheduleHistory.ScheduleID AND
        sh.ScheduleID = s.ScheduleID AND
        sh.StartDate >= {databaseOwner}{objectQualifier}ScheduleHistory.StartDate
    ) > s.RetainHistoryNum
AND RetainHistoryNum<>-1








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPermission
	@PermissionID int
AS

SELECT
	[PermissionID],
	[PermissionCode],
	[ModuleDefID],
	[PermissionKey],
	[PermissionName]
FROM
	{databaseOwner}{objectQualifier}Permission
WHERE
	[PermissionID] = @PermissionID








GO






CREATE PROCEDURE {databaseOwner}{objectQualifier}AddEventLog
	@LogGUID varchar(36),
	@LogTypeKey nvarchar(35),
	@LogUserID int,
	@LogUserName nvarchar(50),
	@LogPortalID int,
	@LogPortalName nvarchar(100),
	@LogCreateDate datetime,
	@LogServerName nvarchar(50),
	@LogProperties ntext,
	@LogConfigID int
AS
INSERT INTO {databaseOwner}{objectQualifier}EventLog
	(LogGUID,
	LogTypeKey,
	LogUserID,
	LogUserName,
	LogPortalID,
	LogPortalName,
	LogCreateDate,
	LogServerName,
	LogProperties,
	LogConfigID)
VALUES
	(@LogGUID,
	@LogTypeKey,
	@LogUserID,
	@LogUserName,
	@LogPortalID,
	@LogPortalName,
	@LogCreateDate,
	@LogServerName,
	@LogProperties,
	@LogConfigID)

DECLARE @NotificationActive bit
DECLARE @NotificationThreshold bit
DECLARE @ThresholdQueue int
DECLARE @NotificationThresholdTime int
DECLARE @NotificationThresholdTimeType int
DECLARE @MinDateTime smalldatetime
DECLARE @CurrentDateTime smalldatetime

SET @CurrentDateTime = getDate()


SELECT TOP 1 @NotificationActive = EmailNotificationIsActive,
	@NotificationThreshold = NotificationThreshold,
	@NotificationThresholdTime = NotificationThresholdTime,
	@NotificationThresholdTimeType = @NotificationThresholdTimeType,
	@MinDateTime = 
		CASE
			 --seconds
			WHEN NotificationThresholdTimeType=1 THEN DateAdd(second, NotificationThresholdTime * -1, @CurrentDateTime)
			--minutes
			WHEN NotificationThresholdTimeType=2  THEN DateAdd(minute, NotificationThresholdTime * -1, @CurrentDateTime)
			--hours
			WHEN NotificationThresholdTimeType=3  THEN DateAdd(Hour, NotificationThresholdTime * -1, @CurrentDateTime)
			--days
			WHEN NotificationThresholdTimeType=4  THEN DateAdd(Day, NotificationThresholdTime * -1, @CurrentDateTime)
		END
FROM {databaseOwner}{objectQualifier}EventLogConfig
WHERE ID = @LogConfigID

IF @NotificationActive=1
BEGIN
	
	SELECT @ThresholdQueue = COUNT(*)
	FROM {databaseOwner}{objectQualifier}EventLog
	INNER JOIN {databaseOwner}{objectQualifier}EventLogConfig
	ON {databaseOwner}{objectQualifier}EventLog.LogConfigID = {databaseOwner}{objectQualifier}EventLogConfig.ID
	WHERE LogCreateDate > @MinDateTime

	PRINT 'MinDateTime=' + convert(varchar(20), @MinDateTime)
	PRINT 'ThresholdQueue=' + convert(varchar(20), @ThresholdQueue)
	PRINT 'NotificationThreshold=' + convert(varchar(20), @NotificationThreshold)

	IF @ThresholdQueue > @NotificationThreshold
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}EventLog
		SET LogNotificationPending = 1 
		WHERE LogConfigID = @LogConfigID
		AND LogNotificationPending IS NULL		
		AND LogCreateDate > @MinDateTime
	END
END

GO

create procedure {databaseOwner}{objectQualifier}AddSearchItem

	@Title nvarchar(200),
	@Description nvarchar(2000),
	@Author int,
	@PubDate datetime,
	@ModuleId int,
	@SearchKey nvarchar(100),
	@Guid nvarchar(200), 
	@ImageFileId int

as

insert into {objectQualifier}SearchItem (
	Title,
	Description,
	Author,
	PubDate,
	ModuleId,
 	SearchKey,
	Guid,
	HitCount,
	ImageFileId
) 
values (
	@Title,
	@Description,
	@Author,
	@PubDate,
	@ModuleId,
	@SearchKey,
	@Guid,
	0,
	@ImageFileId
)

select SCOPE_IDENTITY()








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteFolderPermission
	@FolderPermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}FolderPermission
WHERE
	[FolderPermissionID] = @FolderPermissionID







GO

create procedure {databaseOwner}{objectQualifier}UpdateSystemMessage

@PortalID     int,
@MessageName  nvarchar(50),
@MessageValue ntext

as

update {objectQualifier}SystemMessages
set    MessageValue = @MessageValue
where  ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))
and    MessageName = @MessageName








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPermissionsByFolderPath
	@PortalID int,
	@FolderPath varchar(300)
AS

SELECT
	P.[PermissionID],
	P.[PermissionCode],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}Permission P
WHERE
	P.PermissionCode = 'SYSTEM_FOLDER'








GO
CREATE procedure {databaseOwner}{objectQualifier}AddPortalAlias

@PortalID int,
@HTTPAlias nvarchar(200)

as

INSERT INTO {databaseOwner}{objectQualifier}PortalAlias 
(PortalID, HTTPAlias)
VALUES
(@PortalID, @HTTPAlias)

select SCOPE_IDENTITY()








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleHistory
@ScheduleID int
AS
SELECT S.ScheduleID, S.TypeFullName, SH.StartDate, SH.EndDate, SH.Succeeded, SH.LogNotes, SH.NextStart, SH.Server
FROM {databaseOwner}{objectQualifier}Schedule S
INNER JOIN {databaseOwner}{objectQualifier}ScheduleHistory SH
ON S.ScheduleID = SH.ScheduleID
WHERE S.ScheduleID = @ScheduleID or @ScheduleID = -1

GO

create procedure {databaseOwner}{objectQualifier}UpdateAffiliate

@AffiliateId int,
@StartDate         datetime,
@EndDate           datetime,
@CPC               float,
@CPA               float

as

update {objectQualifier}Affiliates
set    StartDate   = @StartDate,
       EndDate     = @EndDate,
       CPC         = @CPC,
       CPA         = @CPA
where  AffiliateId = @AffiliateId 








GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog12

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select AffiliateId,
 'Requests' = count(*),
 'LastReferral' = max(DateTime)
from {objectQualifier}SiteLog
where {objectQualifier}SiteLog.PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and AffiliateId is not null
group by AffiliateId
order by Requests desc








GO

create procedure {databaseOwner}{objectQualifier}GetModuleControls

@ModuleDefId int

as

select *
from   {objectQualifier}ModuleControls
where  (ModuleDefId is null and @ModuleDefId is null) or (ModuleDefId = @ModuleDefId)
order  by ControlKey, ViewOrder








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLogConfig
	@ID int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}EventLogConfig
WHERE (ID = @ID or @ID IS NULL)


GO

create procedure {databaseOwner}{objectQualifier}UpdateProfile

@UserId        int, 
@PortalId      int,
@ProfileData   ntext

as

update {objectQualifier}Profile
set    ProfileData = @ProfileData,
       CreatedDate = getdate()
where  UserId = @UserId
and    PortalId = @PortalId








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleItemSettings 
@ScheduleID int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}ScheduleItemSettings
WHERE ScheduleID = @ScheduleID








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddEventLogConfig
	@LogTypeKey nvarchar(35),
	@LogTypePortalID int,
	@LoggingIsActive bit,
	@KeepMostRecent int,
	@EmailNotificationIsActive bit,
	@NotificationThreshold int,
	@NotificationThresholdTime int,
	@NotificationThresholdTimeType int,
	@MailFromAddress nvarchar(50),
	@MailToAddress nvarchar(50)
AS
INSERT INTO {databaseOwner}{objectQualifier}EventLogConfig
	(LogTypeKey,
	LogTypePortalID,
	LoggingIsActive,
	KeepMostRecent,
	EmailNotificationIsActive,
	NotificationThreshold,
	NotificationThresholdTime,
	NotificationThresholdTimeType,
	MailFromAddress,
	MailToAddress)
VALUES
	(@LogTypeKey,
	@LogTypePortalID,
	@LoggingIsActive,
	@KeepMostRecent,
	@EmailNotificationIsActive,
	@NotificationThreshold,
	@NotificationThresholdTime,
	@NotificationThresholdTimeType,
	@MailFromAddress,
	@MailToAddress)

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchCommonWordByID
	@CommonWordID int
	
AS

SELECT
	[CommonWordID],
	[CommonWord],
	[Locale]
FROM
	{databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[CommonWordID] = @CommonWordID







GO

CREATE procedure {databaseOwner}{objectQualifier}GetModuleSetting

@ModuleId      int,
@SettingName   nvarchar(50)

as

select 
'SettingValue' = case when {objectQualifier}Files.FileName is null then {objectQualifier}ModuleSettings.SettingValue else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end

from {objectQualifier}ModuleSettings 
left outer join {objectQualifier}Files on {objectQualifier}ModuleSettings.SettingValue = 'fileid=' +
convert(varchar,{objectQualifier}Files.FileID)
where SettingName = @SettingName and moduleid=@moduleid







GO

create procedure {databaseOwner}{objectQualifier}DeleteAffiliate

@AffiliateId int

as

delete
from   {objectQualifier}Affiliates
where  AffiliateId = @AffiliateId








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLogType
AS
SELECT *
FROM {databaseOwner}{objectQualifier}EventLogTypes


GO

create procedure {databaseOwner}{objectQualifier}GetSearchItem
	@ModuleId int,
	@SearchKey varchar(100) 
AS

select
	[SearchItemID],
	[Title],
	[Description],
	[Author],
	[PubDate],
	[ModuleId],
	[SearchKey],
	[Guid],
	[HitCount],
	ImageFileId
from
	{objectQualifier}SearchItem
where
	[ModuleID] = @ModuleID AND
	[SearchKey] = @SearchKey








GO


create procedure {databaseOwner}{objectQualifier}UpdateModuleSetting

@ModuleId      int,
@SettingName   nvarchar(50),
@SettingValue  nvarchar(2000)

as

update {objectQualifier}ModuleSettings
set SettingValue = @SettingValue
where ModuleId = @ModuleId
and SettingName = @SettingName








GO

create procedure {databaseOwner}{objectQualifier}AddPortalDesktopModule

@PortalId int,
@DesktopModuleId int

as

insert into {objectQualifier}PortalDesktopModules ( 
  PortalId,
  DesktopModuleId
)
values (
  @PortalId,
  @DesktopModuleId
)

select SCOPE_IDENTITY()








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateEventLogConfig
	@ID int,
	@LogTypeKey nvarchar(35),
	@LogTypePortalID int,
	@LoggingIsActive bit,
	@KeepMostRecent int,
	@EmailNotificationIsActive bit,
	@NotificationThreshold int,
	@NotificationThresholdTime int,
	@NotificationThresholdTimeType int,
	@MailFromAddress nvarchar(50),
	@MailToAddress nvarchar(50)
AS
UPDATE {databaseOwner}{objectQualifier}EventLogConfig
SET 	LogTypeKey = @LogTypeKey,
	LogTypePortalID = @LogTypePortalID,
	LoggingIsActive = @LoggingIsActive,
	KeepMostRecent = @KeepMostRecent,
	EmailNotificationIsActive = @EmailNotificationIsActive,
	NotificationThreshold = @NotificationThreshold,
	NotificationThresholdTime = @NotificationThresholdTime,
	NotificationThresholdTimeType = @NotificationThresholdTimeType,
	MailFromAddress = @MailFromAddress,
	MailToAddress = @MailToAddress
WHERE	ID = @ID

GO

CREATE procedure {databaseOwner}{objectQualifier}DeletePortalAlias
@PortalAliasID int

as

DELETE FROM {databaseOwner}{objectQualifier}PortalAlias 
WHERE PortalAliasID = @PortalAliasID
	







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleByEvent
@EventName varchar(50),
@Server varchar(150)
AS
SELECT S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled
FROM {databaseOwner}{objectQualifier}Schedule S
WHERE S.AttachToEvent = @EventName
AND (S.Servers LIKE ',%' + @Server + '%,' or S.Servers IS NULL)
GROUP BY S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled


GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteFolderPermissionsByFolderPath
	@PortalID int,
	@FolderPath varchar(300)
AS
DECLARE @FolderID int
SELECT @FolderID = FolderID FROM {databaseOwner}{objectQualifier}Folders
WHERE FolderPath = @FolderPath
AND ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))

DELETE FROM {databaseOwner}{objectQualifier}FolderPermission
WHERE
	[FolderID] = @FolderID







GO

create procedure {databaseOwner}{objectQualifier}UpdateTabModuleSetting

@TabModuleId   int,
@SettingName   nvarchar(50),
@SettingValue  nvarchar(2000)

as

update {objectQualifier}TabModuleSettings
set    SettingValue = @SettingValue
where  TabModuleId = @TabModuleId
and    SettingName = @SettingName








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddModulePermission
	@ModuleID int,
	@PermissionID int,
	@RoleID int,
	@AllowAccess bit
AS

INSERT INTO {databaseOwner}{objectQualifier}ModulePermission (
	[ModuleID],
	[PermissionID],
	[RoleID],
	[AllowAccess]
) VALUES (
	@ModuleID,
	@PermissionID,
	@RoleID,
	@AllowAccess
)

select SCOPE_IDENTITY()








GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteTabPermissionsByTabID
	@TabID int
AS

DELETE FROM {databaseOwner}{objectQualifier}TabPermission
WHERE
	[TabID] = @TabID







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateScheduleHistory
@ScheduleHistoryID int,
@EndDate datetime,
@Succeeded bit,
@LogNotes ntext,
@NextStart datetime
AS
UPDATE {databaseOwner}{objectQualifier}ScheduleHistory
SET	EndDate = @EndDate,
	Succeeded = @Succeeded,
	LogNotes = @LogNotes,
	NextStart = @NextStart
WHERE ScheduleHistoryID = @ScheduleHistoryID








GO

create procedure {databaseOwner}{objectQualifier}GetAffiliates

@VendorId int

as

select AffiliateId,
       StartDate,
       EndDate,
       CPC,
       Clicks,
       'CPCTotal' = Clicks * CPC,
       CPA,
       Acquisitions,
       'CPATotal' = Acquisitions * CPA
from   {objectQualifier}Affiliates
where  VendorId = @VendorId
order  by StartDate desc








GO
CREATE TABLE {databaseOwner}[{objectQualifier}Classification]
(
[ClassificationId] [int] NOT NULL IDENTITY(1, 1),
[ClassificationName] [nvarchar] (200) NOT NULL,
[ParentId] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Classification] ADD CONSTRAINT [PK_{objectQualifier}VendorCategory] PRIMARY KEY CLUSTERED  ([ClassificationId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Classification] ON {databaseOwner}[{objectQualifier}Classification] ([ParentId])
GO


CREATE procedure {databaseOwner}{objectQualifier}GetPortalByAlias

@HTTPAlias nvarchar(200)

as

select 'PortalId' = min(PortalId)
from {databaseOwner}{objectQualifier}PortalAlias
where  HTTPAlias = @HTTPAlias








GO

create procedure {databaseOwner}{objectQualifier}GetProfile

@UserId    int, 
@PortalId  int

as

select *
from   {objectQualifier}Profile
where  UserId = @UserId 
and    PortalId = @PortalId








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateModulePermission
	@ModulePermissionID int, 
	@ModuleID int, 
	@PermissionID int, 
	@RoleID int ,
	@AllowAccess bit
AS

UPDATE {databaseOwner}{objectQualifier}ModulePermission SET
	[ModuleID] = @ModuleID,
	[PermissionID] = @PermissionID,
	[RoleID] = @RoleID,
	[AllowAccess] = @AllowAccess
WHERE
	[ModulePermissionID] = @ModulePermissionID








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}PurgeEventLog
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLog
FROM {databaseOwner}{objectQualifier}EventLogConfig elc
WHERE 
    (
    SELECT COUNT(*)
    FROM {databaseOwner}{objectQualifier}EventLog el
    WHERE el.LogConfigID = elc.ID
	and {databaseOwner}{objectQualifier}EventLog.LogTypeKey = el.LogTypeKey
	and el.LogCreateDate >= {databaseOwner}{objectQualifier}EventLog.LogCreateDate
    ) > elc.KeepMostRecent
AND elc.KeepMostRecent<>-1

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetEventLogPendingNotif
	@LogConfigID int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}EventLog
WHERE LogNotificationPending = 1
AND LogConfigID = @LogConfigID


GO

create procedure {databaseOwner}{objectQualifier}DeleteSystemMessage

@PortalID     int,
@MessageName  nvarchar(50)

as

delete
from   {objectQualifier}SystemMessages
where  PortalID = @PortalID
and    MessageName = @MessageName








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPermissionByCodeAndKey
	@PermissionCode varchar(50),
	@PermissionKey varchar(20)
AS

SELECT
	P.[PermissionID],
	P.[PermissionCode],
	P.[ModuleDefID],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}Permission P
WHERE
	(P.PermissionCode = @PermissionCode or @PermissionCode IS NULL)
	AND
	(P.PermissionKey = @PermissionKey or @PermissionKey IS NULL)








GO


CREATE procedure {databaseOwner}{objectQualifier}UpdateFile

@FileId      int,
@FileName    nvarchar(100),
@Extension   nvarchar(100),
@Size        int,
@WIdth       int,
@Height      int,
@ContentType nvarchar(200),
@Folder nvarchar(200)

as

update {objectQualifier}Files
set    FileName = @FileName,
       Extension = @Extension,
       Size = @Size,
       WIdth = @WIdth,
       Height = @Height,
       ContentType = @ContentType,
       Folder=@Folder
where  FileId = @FileId







GO

create procedure {databaseOwner}{objectQualifier}AddUrl

@PortalID     int,
@Url          nvarchar(255)

as

insert into {objectQualifier}Urls (
  PortalID,
  Url
)
values (
  @PortalID,
  @Url
)








GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalAliasByPortalID

@PortalID int

as

select *
from {databaseOwner}{objectQualifier}PortalAlias
where (PortalID = @PortalID or @PortalID = -1)









GO

create procedure {databaseOwner}{objectQualifier}DeletePortalDesktopModules

@PortalId        int,
@DesktopModuleId int

as

delete
from   {objectQualifier}PortalDesktopModules
where  ((PortalId = @PortalId) or (@PortalId is null and @DesktopModuleId is not null))
and    ((DesktopModuleId = @DesktopModuleId) or (@DesktopModuleId is null and @PortalId is not null))








GO

create procedure {databaseOwner}{objectQualifier}DeleteSearchItemWords
	@SearchItemID int
AS

delete from {databaseOwner}{objectQualifier}SearchItemWord
where
	[SearchItemID] = @SearchItemID







GO

create procedure {databaseOwner}{objectQualifier}GetUrl

@PortalID     int,
@Url          nvarchar(255)

as

select *
from   {objectQualifier}Urls
where  PortalID = @PortalID
and    Url = @Url








GO

create procedure {databaseOwner}{objectQualifier}UpdateSearchItem
	@SearchItemID int, 
	@Title varchar(200), 
	@Description nvarchar(2000), 
	@Author int, 
	@PubDate datetime, 
	@ModuleId int, 
	@SearchKey nvarchar(100), 
	@Guid nvarchar(200), 
	@HitCount int, 
	@ImageFileId int
AS

UPDATE {objectQualifier}SearchItem 
SET	[Title] = @Title,
	[Description] = @Description,
	[Author] = @Author,
	[PubDate] = @PubDate,
	[ModuleId] = @ModuleId,
	[SearchKey] = @SearchKey,
	[Guid] = @Guid,
	[HitCount] = @HitCount,
	ImageFileId = 	@ImageFileId
WHERE   [SearchItemID] = @SearchItemID





GO


create procedure {databaseOwner}{objectQualifier}DeleteFiles

@PortalId int

as

delete 
from   {objectQualifier}Files
where  ((PortalId = @PortalId) or (@PortalId is null and PortalId is null))








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetFolders
	@PortalID int,
	@FolderID int,
	@FolderPath varchar(300)
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}Folders
	WHERE ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))
	AND (FolderID = @FolderID or @FolderID = -1)
	AND (FolderPath = @FolderPath or @FolderPath = '')







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdatePermission
	@PermissionID int, 
	@PermissionCode varchar(50),
	@ModuleDefID int, 
	@PermissionKey varchar(20), 
	@PermissionName varchar(50) 
AS

UPDATE {databaseOwner}{objectQualifier}Permission SET
	[ModuleDefID] = @ModuleDefID,
	[PermissionCode] = @PermissionCode,
	[PermissionKey] = @PermissionKey,
	[PermissionName] = @PermissionName
WHERE
	[PermissionID] = @PermissionID








GO

CREATE  PROCEDURE {databaseOwner}{objectQualifier}GetModuleControlByKeyAndSrc

@ModuleDefId int,
@ControlKey nvarchar(50),
@ControlSrc nvarchar(256)

as
SELECT     ModuleControlID, 
	       ModuleDefID, 
           ControlKey, 
           ControlTitle, 
           ControlSrc, 
           IconFile, 
           ControlType, 
           ViewOrder
from       {databaseOwner}{objectQualifier}ModuleControls
where ((ModuleDefId is null and @ModuleDefId is null) or (ModuleDefID = @ModuleDefID))
and ((ControlKey is null and @ControlKey is null) or (ControlKey = @ControlKey))
and ((ControlSrc is null and @ControlSrc is null) or (ControlSrc = @ControlSrc))








GO

create procedure {databaseOwner}{objectQualifier}GetModuleControl

@ModuleControlId int

as

select *
from   {objectQualifier}ModuleControls
where  ModuleControlId = @ModuleControlId








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateFolderPermission
	@FolderPermissionID int, 
	@FolderID int, 
	@PermissionID int, 
	@RoleID int ,
	@AllowAccess bit
AS

UPDATE {databaseOwner}{objectQualifier}FolderPermission SET
	[FolderID] = @FolderID,
	[PermissionID] = @PermissionID,
	[RoleID] = @RoleID,
	[AllowAccess] = @AllowAccess
WHERE
	[FolderPermissionID] = @FolderPermissionID








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddPermission
	@ModuleDefID int,
	@PermissionCode varchar(50),
	@PermissionKey varchar(20),
	@PermissionName varchar(50)
AS

INSERT INTO {databaseOwner}{objectQualifier}Permission (
	[ModuleDefID],
	[PermissionCode],
	[PermissionKey],
	[PermissionName]
) VALUES (
	@ModuleDefID,
	@PermissionCode,
	@PermissionKey,
	@PermissionName
)

select SCOPE_IDENTITY()








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}ListSearchItemWord
AS

SELECT
	[SearchItemWordID],
	[SearchItemID],
	[SearchWordsID],
	[Occurrences]
FROM
	{databaseOwner}{objectQualifier}SearchItemWord







GO

create procedure {databaseOwner}{objectQualifier}DeleteFile

@PortalId int,
@FileName nvarchar(100),
@Folder nvarchar(100)

AS

DELETE FROM {objectQualifier}Files
WHERE	FileName = @FileName
AND		Folder = @Folder
AND		((PortalId = @PortalId) or (@PortalId is null and PortalId is null))







GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPermissionsByTabID
	@TabID int
AS

SELECT
	P.[PermissionID],
	P.[PermissionCode],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}Permission P
WHERE
	P.PermissionCode = 'SYSTEM_TAB'








GO

create procedure {databaseOwner}{objectQualifier}GetUrls

@PortalID     int

as

select *
from   {objectQualifier}Urls
where  PortalID = @PortalID
order by Url








GO

create procedure {databaseOwner}{objectQualifier}AddSkin

@SkinRoot               nvarchar(50),
@PortalID		int,
@SkinType               int,
@SkinSrc                nvarchar(200)

as

insert into {objectQualifier}Skins (
  SkinRoot,
  PortalID,
  SkinType,
  SkinSrc
)
values (
  @SkinRoot,
  @PortalID,
  @SkinType,
  @SkinSrc
)

select SCOPE_IDENTITY()








GO


create procedure {databaseOwner}{objectQualifier}AddVendorClassification

@VendorId           int,
@ClassificationId   int

as

insert into {objectQualifier}VendorClassification ( 
  VendorId,
  ClassificationId
)
values (
  @VendorId,
  @ClassificationId
)

select SCOPE_IDENTITY()








GO

CREATE procedure {databaseOwner}{objectQualifier}UpdatePortalAlias
@PortalAliasID int,
@PortalID int,
@HTTPAlias nvarchar(200)

as

UPDATE {databaseOwner}{objectQualifier}PortalAlias 
SET HTTPAlias = @HTTPAlias
WHERE PortalID = @PortalID
AND	  PortalAliasID = @PortalAliasID
	







GO

create procedure {databaseOwner}{objectQualifier}AddProfile

@UserId        int, 
@PortalId      int

as

insert into {objectQualifier}Profile (
  UserId,
  PortalId,
  ProfileData,
  CreatedDate
)
values (
  @UserId,
  @PortalId,
  '',
  getdate()
)








GO

create procedure {databaseOwner}{objectQualifier}DeleteFolder
	@PortalID int,
	@FolderPath varchar(300)
AS
	DELETE FROM {objectQualifier}Folders
	WHERE ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))
	AND FolderPath = @FolderPath






GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog7

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select 'WeekDay' = datepart(weekday,DateTime),
 'Views' = count(*),
 'Visitors' = count(distinct {objectQualifier}SiteLog.UserHostAddress),
 'Users' = count(distinct {objectQualifier}SiteLog.UserId)
from {objectQualifier}SiteLog
where PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(weekday,DateTime)
order by WeekDay








GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog6

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select 'Hour' = datepart(hour,DateTime),
 'Views' = count(*),
 'Visitors' = count(distinct {objectQualifier}SiteLog.UserHostAddress),
 'Users' = count(distinct {objectQualifier}SiteLog.UserId)
from {objectQualifier}SiteLog
where PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
group by datepart(hour,DateTime)
order by Hour








GO

create procedure {databaseOwner}{objectQualifier}DeleteSiteLog

@DateTime                      datetime, 
@PortalId                      int

as

delete
from {objectQualifier}SiteLog
where  PortalId = @PortalId
and    DateTime < @DateTime








GO


CREATE procedure {databaseOwner}{objectQualifier}AddFile

@PortalId    int,
@FileName    nvarchar(100),
@Extension   nvarchar(100),
@Size        int,
@WIdth       int,
@Height      int,
@ContentType nvarchar(200),
@Folder nvarchar(200)

as

insert into {objectQualifier}Files ( 
  PortalId,
  FileName,
  Extension,
  Size,
  WIdth,
  Height,
  ContentType,
  Folder
)
values (
  @PortalId,
  @FileName,
  @Extension,
  @Size,
  @WIdth,
  @Height,
  @ContentType,
  @Folder
)

select SCOPE_IDENTITY()







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchCommonWordsByLocale
	@Locale nvarchar(10)
	
AS

SELECT
	[CommonWordID],
	[CommonWord],
	[Locale]
FROM
	{databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[Locale] = @Locale







GO

create procedure {databaseOwner}{objectQualifier}UpdateDatabaseVersion

@Major  int,
@Minor  int,
@Build  int

as

insert into {objectQualifier}Version (
  Major,
  Minor,
  Build,
  CreatedDate
)
values (
  @Major,
  @Minor,
  @Build,
  getdate()
)








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddEventLogType
	@LogTypeKey nvarchar(35),
	@LogTypeFriendlyName nvarchar(50),
	@LogTypeDescription nvarchar(128),
	@LogTypeOwner nvarchar(100),
	@LogTypeCSSClass nvarchar(40)
AS
	INSERT INTO {databaseOwner}{objectQualifier}EventLogTypes
	(LogTypeKey,
	LogTypeFriendlyName,
	LogTypeDescription,
	LogTypeOwner,
	LogTypeCSSClass)
VALUES
	(@LogTypeKey,
	@LogTypeFriendlyName,
	@LogTypeDescription,
	@LogTypeOwner,
	@LogTypeCSSClass)	
	

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateUserRole 
    @UserRoleId int, 
    @ExpiryDate datetime
AS

UPDATE {objectQualifier}UserRoles 
SET ExpiryDate = @ExpiryDate
WHERE UserRoleId = @UserRoleId







GO


create procedure {databaseOwner}{objectQualifier}GetPortalSpaceUsed

@PortalId int

as

select 'SpaceUsed' = sum(Size)
from   {objectQualifier}Files
where  ((PortalId = @PortalId) or (@PortalId is null and PortalId is null))








GO

CREATE procedure {databaseOwner}{objectQualifier}DeleteSearchItems
(
	@ModuleID int
)
AS

DELETE
FROM	{objectQualifier}SearchItem
WHERE	ModuleID = @ModuleID






GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteSearchItemWordPosition
	@SearchItemWordPositionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchItemWordPosition
WHERE
	[SearchItemWordPositionID] = @SearchItemWordPositionID







GO

CREATE  PROCEDURE {databaseOwner}{objectQualifier}AddSearchItemWordPosition
	@SearchItemWordID int,
	@ContentPositions varChar(2000)
AS

	SET NOCOUNT ON

	DECLARE @TempList table
	(
		ItemWordID int,
		Position int
	)

	DECLARE @Position varchar(10), @Pos int

	SET @ContentPositions = LTRIM(RTRIM(@ContentPositions))+ ','
	SET @Pos = CHARINDEX(',', @ContentPositions, 1)

	IF REPLACE(@ContentPositions, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @Position = LTRIM(RTRIM(LEFT(@ContentPositions, @Pos - 1)))
			IF @Position <> ''
			BEGIN
				INSERT INTO @TempList (ItemWordID, Position) VALUES (@SearchItemWordID, CAST(@Position AS int)) 
			END
			SET @ContentPositions = RIGHT(@ContentPositions, LEN(@ContentPositions) - @Pos)
			SET @Pos = CHARINDEX(',', @ContentPositions, 1)

		END
	END	

	INSERT INTO {databaseOwner}{objectQualifier}SearchItemWordPosition (
		[SearchItemWordID],
		[ContentPosition]) 
	SELECT ItemWordID, Position FROM @TempList









GO


create procedure {databaseOwner}{objectQualifier}DeleteVendorClassifications

@VendorId  int

as

delete
from {objectQualifier}VendorClassification
where  VendorId = @VendorId









GO

create procedure {databaseOwner}{objectQualifier}GetSystemMessage

@PortalID     int,
@MessageName  nvarchar(50)

as

select MessageValue
from   {objectQualifier}SystemMessages
where  ((PortalID = @PortalID) or (PortalID is null and @PortalID is null)) 
and    MessageName = @MessageName








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateEventLogPendingNotif
	@LogConfigID int
AS
UPDATE {databaseOwner}{objectQualifier}EventLog
SET LogNotificationPending = 0
WHERE LogNotificationPending = 1
AND LogConfigID = @LogConfigID


GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSearchItemWord
	@SearchItemID int,
	@SearchWordsID int,
	@Occurrences int
AS

INSERT INTO {databaseOwner}{objectQualifier}SearchItemWord (
	[SearchItemID],
	[SearchWordsID],
	[Occurrences]
) VALUES (
	@SearchItemID,
	@SearchWordsID,
	@Occurrences
)

select SCOPE_IDENTITY()







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddSearchWord
	@Word nvarchar(100)
AS

INSERT INTO {databaseOwner}{objectQualifier}SearchWord (
	[Word],
	[IsCommon],
	[HitCount]
) VALUES (
	@Word,
	0,
	1
)

select SCOPE_IDENTITY()







GO

create procedure {databaseOwner}{objectQualifier}ListSearchItem

AS

select
	[SearchItemID],
	[Title],
	[Description],
	[Author],
	[PubDate],
	[ModuleId],
	[SearchKey],
	[Guid],
	[HitCount],
	ImageFileId
from
	{objectQualifier}SearchItem








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteModulePermission
	@ModulePermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}ModulePermission
WHERE
	[ModulePermissionID] = @ModulePermissionID







GO

CREATE  procedure {databaseOwner}{objectQualifier}AddModuleControl
    
@ModuleDefID                   int,
@ControlKey                    nvarchar(50),
@ControlTitle                  nvarchar(50),
@ControlSrc                    nvarchar(256),
@IconFile                      nvarchar(100),
@ControlType                   int,
@ViewOrder                     int,
@HelpUrl                       nvarchar(200)

as

insert into {objectQualifier}ModuleControls (
  ModuleDefID,
  ControlKey,
  ControlTitle,
  ControlSrc,
  IconFile,
  ControlType,
  ViewOrder,
  HelpUrl
)
values (
  @ModuleDefID,
  @ControlKey,
  @ControlTitle,
  @ControlSrc,
  @IconFile,
  @ControlType,
  @ViewOrder,
  @HelpUrl
)

select SCOPE_IDENTITY()








GO
CREATE TABLE {databaseOwner}[{objectQualifier}Portals]
(
[PortalID] [int] NOT NULL IDENTITY(0, 1),
[PortalName] [nvarchar] (128) NOT NULL,
[LogoFile] [nvarchar] (50) NULL,
[FooterText] [nvarchar] (100) NULL,
[ExpiryDate] [datetime] NULL,
[UserRegistration] [int] NOT NULL DEFAULT (0),
[BannerAdvertising] [int] NOT NULL DEFAULT (0),
[AdministratorId] [int] NULL,
[Currency] [char] (3) NULL,
[HostFee] [money] NOT NULL DEFAULT (0),
[HostSpace] [int] NOT NULL DEFAULT (0),
[AdministratorRoleId] [int] NULL,
[RegisteredRoleId] [int] NULL,
[Description] [nvarchar] (500) NULL,
[KeyWords] [nvarchar] (500) NULL,
[BackgroundFile] [nvarchar] (50) NULL,
[GUID] [uniqueidentifier] NOT NULL DEFAULT (newid()),
[PaymentProcessor] [nvarchar] (50) NULL,
[ProcessorUserId] [nvarchar] (50) NULL,
[ProcessorPassword] [nvarchar] (50) NULL,
[SiteLogHistory] [int] NULL,
[HomeTabId] [int] NULL,
[LoginTabId] [int] NULL,
[UserTabId] [int] NULL,
[DefaultLanguage] [nvarchar] (6) NOT NULL DEFAULT ('en-US'),
[TimezoneOffset] [int] NOT NULL DEFAULT ((-8)),
[AdminTabId] [int] NULL,
[HomeDirectory] [varchar] (100) NOT NULL DEFAULT (''),
[SplashTabId] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD CONSTRAINT [PK_{objectQualifier}Portals] PRIMARY KEY NONCLUSTERED  ([PortalID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Tabs]
(
[TabID] [int] NOT NULL IDENTITY(0, 1),
[TabOrder] [int] NOT NULL DEFAULT (0),
[PortalID] [int] NULL,
[TabName] [nvarchar] (50) NOT NULL,
[IsVisible] [bit] NOT NULL DEFAULT (1),
[ParentId] [int] NULL,
[Level] [int] NOT NULL DEFAULT (0),
[IconFile] [nvarchar] (100) NULL,
[DisableLink] [bit] NOT NULL DEFAULT (0),
[Title] [nvarchar] (200) NULL,
[Description] [nvarchar] (500) NULL,
[KeyWords] [nvarchar] (500) NULL,
[IsDeleted] [bit] NOT NULL DEFAULT (0),
[Url] [nvarchar] (255) NULL,
[SkinSrc] [nvarchar] (200) NULL,
[ContainerSrc] [nvarchar] (200) NULL,
[TabPath] [nvarchar] (255) NULL,
[StartDate] [datetime] NULL,
[EndDate] [datetime] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD CONSTRAINT [PK_{objectQualifier}Tabs] PRIMARY KEY NONCLUSTERED  ([TabID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Tabs_1] ON {databaseOwner}[{objectQualifier}Tabs] ([PortalID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Tabs_2] ON {databaseOwner}[{objectQualifier}Tabs] ([ParentId])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions]
(
[ModuleDefID] [int] NOT NULL IDENTITY(1, 1),
[FriendlyName] [nvarchar] (128) NOT NULL,
[DesktopModuleID] [int] NOT NULL,
[DefaultCacheTime] [int] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions] ADD CONSTRAINT [PK_{objectQualifier}ModuleDefinitions] PRIMARY KEY NONCLUSTERED  ([ModuleDefID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}ModuleDefinitions_1] ON {databaseOwner}[{objectQualifier}ModuleDefinitions] ([DesktopModuleID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UrlTracking]
(
[UrlTrackingID] [int] NOT NULL IDENTITY(1, 1),
[PortalID] [int] NULL,
[Url] [nvarchar] (255) NOT NULL,
[UrlType] [char] (1) NOT NULL,
[Clicks] [int] NOT NULL,
[LastClick] [datetime] NULL,
[CreatedDate] [datetime] NOT NULL,
[LogActivity] [bit] NOT NULL,
[TrackClicks] [bit] NOT NULL DEFAULT (1),
[ModuleId] [int] NULL,
[NewWindow] [bit] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] ADD CONSTRAINT [PK_{objectQualifier}UrlTracking] PRIMARY KEY CLUSTERED  ([UrlTrackingID])
GO

create procedure {databaseOwner}{objectQualifier}DeleteUrlTracking

@PortalID     int,
@Url          nvarchar(255),
@ModuleID     int

as

delete
from   {objectQualifier}UrlTracking
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))








GO
CREATE TABLE {databaseOwner}[{objectQualifier}Vendors]
(
[VendorId] [int] NOT NULL IDENTITY(1, 1),
[VendorName] [nvarchar] (50) NOT NULL,
[Street] [nvarchar] (50) NULL,
[City] [nvarchar] (50) NULL,
[Region] [nvarchar] (50) NULL,
[Country] [nvarchar] (50) NULL,
[PostalCode] [nvarchar] (50) NULL,
[Telephone] [nvarchar] (50) NULL,
[PortalId] [int] NULL,
[Fax] [nvarchar] (50) NULL,
[Email] [nvarchar] (50) NULL,
[Website] [nvarchar] (100) NULL,
[ClickThroughs] [int] NOT NULL DEFAULT (0),
[Views] [int] NOT NULL DEFAULT (0),
[CreatedByUser] [nvarchar] (100) NULL,
[CreatedDate] [datetime] NULL,
[LogoFile] [nvarchar] (100) NULL,
[KeyWords] [ntext] NULL,
[Unit] [nvarchar] (50) NULL,
[Authorized] [bit] NOT NULL DEFAULT (1),
[FirstName] [nvarchar] (50) NULL,
[LastName] [nvarchar] (50) NULL,
[Cell] [varchar] (50) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Vendors] ADD CONSTRAINT [PK_{objectQualifier}Vendor] PRIMARY KEY CLUSTERED  ([VendorId])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Banners]
(
[BannerId] [int] NOT NULL IDENTITY(1, 1),
[VendorId] [int] NOT NULL,
[ImageFile] [nvarchar] (100) NULL,
[BannerName] [nvarchar] (100) NOT NULL,
[Impressions] [int] NOT NULL,
[CPM] [float] NOT NULL,
[Views] [int] NOT NULL DEFAULT (0),
[ClickThroughs] [int] NOT NULL DEFAULT (0),
[StartDate] [datetime] NULL,
[EndDate] [datetime] NULL,
[CreatedByUser] [nvarchar] (100) NOT NULL,
[CreatedDate] [datetime] NOT NULL,
[BannerTypeId] [int] NULL,
[Description] [nvarchar] (2000) NULL,
[GroupName] [nvarchar] (100) NULL,
[Criteria] [bit] NOT NULL DEFAULT (1),
[URL] [nvarchar] (255) NULL,
[Width] [int] NOT NULL DEFAULT (0),
[Height] [int] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Banners] ADD CONSTRAINT [PK_{objectQualifier}Banner] PRIMARY KEY CLUSTERED  ([BannerId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Banners_1] ON {databaseOwner}[{objectQualifier}Banners] ([VendorId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Banners] ON {databaseOwner}[{objectQualifier}Banners] ([BannerTypeId])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}DesktopModules]
(
[DesktopModuleID] [int] NOT NULL IDENTITY(1, 1),
[FriendlyName] [nvarchar] (128) NOT NULL,
[Description] [nvarchar] (2000) NULL,
[Version] [nvarchar] (8) NULL,
[IsPremium] [bit] NOT NULL,
[IsAdmin] [bit] NOT NULL,
[BusinessControllerClass] [nvarchar] (200) NULL,
[FolderName] [nvarchar] (128) NOT NULL,
[ModuleName] [nvarchar] (128) NOT NULL,
[SupportedFeatures] [int] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD CONSTRAINT [PK_{objectQualifier}DesktopModules] PRIMARY KEY CLUSTERED  ([DesktopModuleID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}DesktopModules_FriendlyName] ON {databaseOwner}[{objectQualifier}DesktopModules] ([FriendlyName])
GO

CREATE procedure {databaseOwner}{objectQualifier}GetDesktopModuleByModuleName

	@ModuleName    nvarchar(128)

as

select *
from   {objectQualifier}DesktopModules
where  ModuleName = @ModuleName


GO

create procedure {databaseOwner}{objectQualifier}GetDesktopModulesByPortal

@PortalId int

as

select distinct({objectQualifier}DesktopModules.DesktopModuleId) as DesktopModuleId,
       {objectQualifier}DesktopModules.FriendlyName,
       {objectQualifier}DesktopModules.Description
from {objectQualifier}DesktopModules
left outer join {objectQualifier}PortalDesktopModules on {objectQualifier}DesktopModules.DesktopModuleId = {objectQualifier}PortalDesktopModules.DesktopModuleId
where  IsAdmin = 0
and    ( IsPremium = 0 or (PortalId = @PortalId and PortalDesktopModuleId is not null)) 
order  by FriendlyName








GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabModules]
(
[TabModuleID] [int] NOT NULL IDENTITY(1, 1),
[TabID] [int] NOT NULL,
[ModuleID] [int] NOT NULL,
[PaneName] [nvarchar] (50) NOT NULL,
[ModuleOrder] [int] NOT NULL,
[CacheTime] [int] NOT NULL,
[Alignment] [nvarchar] (10) NULL,
[Color] [nvarchar] (20) NULL,
[Border] [nvarchar] (1) NULL,
[IconFile] [nvarchar] (100) NULL,
[Visibility] [int] NOT NULL,
[ContainerSrc] [nvarchar] (200) NULL,
[DisplayTitle] [bit] NOT NULL DEFAULT (1),
[DisplayPrint] [bit] NOT NULL DEFAULT (1),
[DisplaySyndicate] [bit] NOT NULL DEFAULT (1)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD CONSTRAINT [PK_{objectQualifier}TabModules] PRIMARY KEY CLUSTERED  ([TabModuleID])
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Roles]
(
[RoleID] [int] NOT NULL IDENTITY(0, 1),
[PortalID] [int] NOT NULL,
[RoleName] [nvarchar] (50) NOT NULL,
[Description] [nvarchar] (1000) NULL,
[ServiceFee] [money] NULL DEFAULT (0),
[BillingFrequency] [char] (1) NULL,
[TrialPeriod] [int] NULL,
[TrialFrequency] [char] (1) NULL,
[BillingPeriod] [int] NULL,
[TrialFee] [money] NULL,
[IsPublic] [bit] NOT NULL DEFAULT (0),
[AutoAssignment] [bit] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD CONSTRAINT [PK_{objectQualifier}Roles] PRIMARY KEY NONCLUSTERED  ([RoleID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Roles] ON {databaseOwner}[{objectQualifier}Roles] ([BillingFrequency])
GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortal

@PortalId  int

as

select {objectQualifier}Portals.PortalID,
       {objectQualifier}Portals.PortalName,
       'LogoFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Portals.LogoFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       {objectQualifier}Portals.FooterText,
       {objectQualifier}Portals.ExpiryDate,
       {objectQualifier}Portals.UserRegistration,
       {objectQualifier}Portals.BannerAdvertising,
       {objectQualifier}Portals.AdministratorID,
       {objectQualifier}Portals.Currency,
       {objectQualifier}Portals.HostFee,
       {objectQualifier}Portals.HostSpace,
       {objectQualifier}Portals.AdministratorRoleID,
       {objectQualifier}Portals.RegisteredRoleID,
       {objectQualifier}Portals.Description,
       {objectQualifier}Portals.KeyWords,
       'BackGroundFile' = case when {objectQualifier}Files2.FileName is null then {objectQualifier}Portals.BackGroundFile else {objectQualifier}Files2.Folder + {objectQualifier}Files2.FileName end,
       {objectQualifier}Portals.GUID,
       {objectQualifier}Portals.PaymentProcessor,
       {objectQualifier}Portals.ProcessorUserId,
       {objectQualifier}Portals.ProcessorPassword,
       {objectQualifier}Portals.SiteLogHistory,
       {objectQualifier}Portals.SplashTabID,
       {objectQualifier}Portals.HomeTabID,
       {objectQualifier}Portals.LoginTabID,
       {objectQualifier}Portals.UserTabID,
       {objectQualifier}Portals.DefaultLanguage,
       {objectQualifier}Portals.TimeZoneOffset,
       {objectQualifier}Portals.AdminTabID,
       {objectQualifier}Portals.HomeDirectory,
       'SuperTabId' = ( select TabId from {objectQualifier}Tabs where PortalId is null and ParentId is null ),
       'AdministratorRoleName' = ( select RoleName from {objectQualifier}Roles where RoleId = {objectQualifier}Portals.AdministratorRoleID ),
       'RegisteredRoleName' = ( select RoleName from {objectQualifier}Roles where RoleId = {objectQualifier}Portals.RegisteredRoleID )
from {objectQualifier}Portals
left outer join {objectQualifier}Files on {objectQualifier}Portals.LogoFile = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
left outer join {objectQualifier}Files as {objectQualifier}Files2 on {objectQualifier}Portals.BackGroundFile = 'fileid=' +convert(varchar,{objectQualifier}Files2.FileID)
where {objectQualifier}Portals.PortalId = @PortalId







GO
CREATE TABLE {databaseOwner}[{objectQualifier}Users]
(
[UserID] [int] NOT NULL IDENTITY(1, 1),
[Username] [nvarchar] (100) NOT NULL,
[FirstName] [nvarchar] (50) NOT NULL,
[LastName] [nvarchar] (50) NOT NULL,
[IsSuperUser] [bit] NOT NULL DEFAULT (0),
[AffiliateId] [int] NULL,
[Email] [nvarchar] (256) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD CONSTRAINT [PK_{objectQualifier}Users] PRIMARY KEY CLUSTERED  ([UserID])
GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog3

	@PortalId int,
	@PortalAlias nvarchar(50),
	@StartDate datetime,
	@EndDate datetime

as

select 'Name' = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
	'Requests' = count(*),
	'LastRequest' = max(DateTime)
from {objectQualifier}SiteLog
inner join {objectQualifier}Users on {objectQualifier}SiteLog.UserId = {objectQualifier}Users.UserId
where {objectQualifier}SiteLog.PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and {objectQualifier}SiteLog.UserId is not null
group by {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName
order by Requests desc








GO
CREATE TABLE {databaseOwner}[{objectQualifier}Modules]
(
[ModuleID] [int] NOT NULL IDENTITY(0, 1),
[ModuleDefID] [int] NOT NULL,
[ModuleTitle] [nvarchar] (256) NULL,
[AllTabs] [bit] NOT NULL DEFAULT (0),
[IsDeleted] [bit] NOT NULL DEFAULT (0),
[InheritViewPermissions] [bit] NULL,
[Header] [ntext] NULL,
[Footer] [ntext] NULL,
[StartDate] [datetime] NULL,
[EndDate] [datetime] NULL,
[PortalID] [int] NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD CONSTRAINT [PK_{objectQualifier}Modules] PRIMARY KEY NONCLUSTERED  ([ModuleID])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Modules] ON {databaseOwner}[{objectQualifier}Modules] ([ModuleDefID])
GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPermissionsByModuleID
	@ModuleID int
AS

SELECT
	P.[PermissionID],
	P.[PermissionCode],
	P.[ModuleDefID],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}Permission P
WHERE
	P.ModuleDefID = (SELECT ModuleDefID FROM {databaseOwner}{objectQualifier}Modules WHERE ModuleID = @ModuleID)
OR 	P.PermissionCode = 'SYSTEM_MODULE_DEFINITION'








GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetFolderPermission
	@FolderPermissionID int
AS

SELECT
	FP.[FolderPermissionID],
	F.[FolderPath],
	P.[PermissionID],
	FP.[RoleID],
	case FP.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	FP.[AllowAccess],
	P.[PermissionCode],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}FolderPermission FP
LEFT JOIN
	{databaseOwner}{objectQualifier}Folders F
ON	FP.FolderID = F.FolderID
LEFT JOIN
	{databaseOwner}{objectQualifier}Permission P
ON	FP.PermissionID = P.PermissionID
LEFT JOIN
	{databaseOwner}{objectQualifier}Roles R
ON	FP.RoleID = R.RoleID
WHERE
	FP.FolderPermissionID = @FolderPermissionID







GO
CREATE TABLE {databaseOwner}[{objectQualifier}Lists]
(
[EntryID] [int] NOT NULL IDENTITY(1, 1),
[ListName] [nvarchar] (50) NOT NULL,
[Value] [nvarchar] (100) NOT NULL,
[Text] [nvarchar] (150) NOT NULL,
[ParentID] [int] NOT NULL DEFAULT (0),
[Level] [int] NOT NULL DEFAULT (0),
[SortOrder] [int] NOT NULL DEFAULT (0),
[DefinitionID] [int] NOT NULL DEFAULT (0),
[Description] [nvarchar] (500) NULL
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD CONSTRAINT [PK_{objectQualifier}Lists] PRIMARY KEY CLUSTERED  ([ListName], [Value], [Text], [ParentID])
GO

CREATE procedure {databaseOwner}{objectQualifier}GetList

@ListName nvarchar(50),
@ParentKey nvarchar(150),
@DefinitionID int

as
If @ParentKey = '' 
Begin
	Select DISTINCT 	
	E.[ListName],
	E.[Level],	
	E.[DefinitionID],
	E.[ParentID],	
	(SELECT MAX([SortOrder]) FROM {objectQualifier}Lists WHERE [ListName] = E.[ListName]) As [MaxSortOrder],
	(SELECT COUNT(EntryID) FROM {objectQualifier}Lists WHERE [ListName] = E.[ListName] AND ParentID = E.[ParentID]) As EntryCount,
	IsNull((SELECT [ListName] + '.' + [Value] + ':' FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') + E.[ListName] As [Key],	
	IsNull((SELECT [ListName] + '.' + [Text] + ':' FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') + E.[ListName] As [DisplayName],
	IsNull((SELECT [ListName] + '.' + [Value] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [ParentKey],
	IsNull((SELECT [ListName] + '.' + [Text] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [Parent],
	IsNull((SELECT [ListName] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]),'') As [ParentList]
	From {objectQualifier}Lists E (nolock)
	where  ([ListName] = @ListName or @ListName='')
	and (DefinitionID = @DefinitionID or @DefinitionID = -1)
End
Else
Begin

	DECLARE @ParentListName nvarchar(50)
	DECLARE @ParentValue nvarchar(100)
	SET @ParentListName = LEFT(@ParentKey, CHARINDEX( '.', @ParentKey) - 1)
	SET @ParentValue = RIGHT(@ParentKey, LEN(@ParentKey) -  CHARINDEX( '.', @ParentKey))
	Select DISTINCT 	
	E.[ListName],
	E.[Level],	
	E.[DefinitionID],
	E.[ParentID],	
	(SELECT MAX([SortOrder]) FROM {objectQualifier}Lists WHERE [ListName] = E.[ListName]) As [MaxSortOrder],
	(SELECT COUNT(EntryID) FROM {objectQualifier}Lists WHERE [ListName] = E.[ListName] AND ParentID = E.[ParentID]) As EntryCount,
	IsNull((SELECT [ListName] + '.' + [Value] + ':' FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') + E.[ListName] As [Key],	
	IsNull((SELECT [ListName] + '.' + [Text] + ':' FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') + E.[ListName] As [DisplayName],
	IsNull((SELECT [ListName] + '.' + [Value] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [ParentKey],
	IsNull((SELECT [ListName] + '.' + [Text] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [Parent],
	IsNull((SELECT [ListName] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]),'') As [ParentList]
	
	From {objectQualifier}Lists E (nolock)
	where  [ListName] = @ListName And
	[ParentID] = (SELECT [EntryID] From {objectQualifier}Lists Where [ListName] = @ParentListName And [Value] = @ParentValue)	

End







GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog9

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select 'Page' = {objectQualifier}Tabs.TabName,
 'Requests' = count(*),
 'LastRequest' = max(DateTime)
from {objectQualifier}SiteLog
inner join {objectQualifier}Tabs on {objectQualifier}SiteLog.TabId = {objectQualifier}Tabs.TabId
where {objectQualifier}SiteLog.PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
and {objectQualifier}SiteLog.TabId is not null
group by {objectQualifier}Tabs.TabName
order by Requests desc








GO



CREATE procedure {databaseOwner}{objectQualifier}GetModuleSettings

@ModuleId int

as

select SettingName,

'SettingValue' = case when {objectQualifier}Files.FileName is null then {objectQualifier}ModuleSettings.SettingValue else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end

from {objectQualifier}ModuleSettings 
left outer join {objectQualifier}Files on {objectQualifier}ModuleSettings.SettingValue = 'fileid=' +
convert(varchar,{objectQualifier}Files.FileID)
where  ModuleId = @ModuleId







GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetModulePermission
	@ModulePermissionID int
AS

SELECT
	M.[ModulePermissionID],
	M.[ModuleID],
	P.[PermissionID],
	M.[RoleID],
	case M.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	M.[AllowAccess],
	P.[PermissionCode],
	P.[ModuleDefID],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}ModulePermission M
LEFT JOIN
	{databaseOwner}{objectQualifier}Permission P
ON	M.PermissionID = P.PermissionID
LEFT JOIN
	{databaseOwner}{objectQualifier}ModuleDefinitions MD
ON	P.ModuleDefID = MD.ModuleDefID
LEFT JOIN
	{databaseOwner}{objectQualifier}Roles R
ON	M.RoleID = R.RoleID
WHERE
	M.ModulePermissionID = @ModulePermissionID









GO

create procedure {databaseOwner}{objectQualifier}UpdateTabModule

@TabId               int,
@ModuleId            int,
@ModuleOrder         int,
@PaneName            nvarchar(50),
@CacheTime           int,
@Alignment           nvarchar(10),
@Color               nvarchar(20),
@Border              nvarchar(1),
@IconFile            nvarchar(100),
@Visibility          int,
@ContainerSrc        nvarchar(200),
@DisplayTitle        bit,
@DisplayPrint        bit,
@DisplaySyndicate    bit

as

update {objectQualifier}TabModules
set    ModuleOrder = @ModuleOrder,
       PaneName = @PaneName,
       CacheTime = @CacheTime,
       Alignment = @Alignment,
       Color = @Color,
       Border = @Border,
       IconFile = @IconFile,
       Visibility = @Visibility,
       ContainerSrc = @ContainerSrc,
       DisplayTitle = @DisplayTitle,
       DisplayPrint = @DisplayPrint,
       DisplaySyndicate = @DisplaySyndicate
where  TabId = @TabId
and    ModuleId = @ModuleId







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetScheduleNextTask
	@Server varchar(150)
AS
SELECT TOP 1 S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, SH.NextStart
FROM {objectQualifier}Schedule S
LEFT JOIN {objectQualifier}ScheduleHistory SH
ON S.ScheduleID = SH.ScheduleID
WHERE ((SH.ScheduleHistoryID = (SELECT TOP 1 S1.ScheduleHistoryID FROM {objectQualifier}ScheduleHistory S1 WHERE S1.ScheduleID = S.ScheduleID ORDER BY S1.NextStart DESC)
OR  SH.ScheduleHistoryID IS NULL) AND S.Enabled = 1)
AND (S.Servers LIKE ',%' + @Server + '%,' or S.Servers IS NULL)
GROUP BY S.ScheduleID, S.TypeFullName, S.TimeLapse, S.TimeLapseMeasurement,  S.RetryTimeLapse, S.RetryTimeLapseMeasurement, S.ObjectDependencies, S.AttachToEvent, S.RetainHistoryNum, S.CatchUpEnabled, S.Enabled, SH.NextStart
ORDER BY SH.NextStart ASC


GO

CREATE procedure {databaseOwner}{objectQualifier}GetVendor

@VendorId int,
@PortalId int

as

select {objectQualifier}Vendors.VendorName, 
       {objectQualifier}Vendors.Unit, 
       {objectQualifier}Vendors.Street, 
       {objectQualifier}Vendors.City, 
       {objectQualifier}Vendors.Region, 
       {objectQualifier}Vendors.Country, 
       {objectQualifier}Vendors.PostalCode, 
       {objectQualifier}Vendors.Telephone,
       {objectQualifier}Vendors.Fax,
       {objectQualifier}Vendors.Cell,
       {objectQualifier}Vendors.Email,
       {objectQualifier}Vendors.Website,
       {objectQualifier}Vendors.FirstName,
       {objectQualifier}Vendors.LastName,
       {objectQualifier}Vendors.ClickThroughs,
       {objectQualifier}Vendors.Views,
       'CreatedByUser' = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
       {objectQualifier}Vendors.CreatedDate,
      'LogoFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Vendors.LogoFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       {objectQualifier}Vendors.KeyWords,
       {objectQualifier}Vendors.Authorized,
       {objectQualifier}Vendors.PortalId
from {objectQualifier}Vendors
left outer join {objectQualifier}Users on {objectQualifier}Vendors.CreatedByUser = {objectQualifier}Users.UserId
left outer join {objectQualifier}Files on {objectQualifier}Vendors.LogoFile = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
where  VendorId = @VendorId
and    (({objectQualifier}Vendors.PortalId = @PortalId) or ({objectQualifier}Vendors.PortalId is null and @PortalId is null))








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchModules

@PortalID int

as

select M.ModuleID,
       M.ModuleDefID,
       M.ModuleTitle,
       M.AllTabs,
       M.IsDeleted,
       M.InheritViewPermissions,
       M.Header,
       M.Footer,
       M.StartDate,
       M.EndDate,
       M.PortalID,
       TM.TabModuleId,
       TM.TabId,
       TM.PaneName,
       TM.ModuleOrder,
       TM.CacheTime,
       TM.Alignment,
       TM.Color,
       TM.Border,
       TM.Visibility,
       TM.ContainerSrc,
       TM.DisplayTitle,
       TM.DisplayPrint,
       TM.DisplaySyndicate,
       'IconFile' = case when F.FileName is null then TM.IconFile else F.Folder + F.FileName end,
       DM.*,
       MC.ModuleControlId,
       MC.ControlSrc,
       MC.ControlType,
       MC.ControlTitle,
       MC.HelpURL
from {objectQualifier}Modules M
inner join {objectQualifier}TabModules TM on M.ModuleId = TM.ModuleId
inner join {objectQualifier}Tabs T on TM.TabId = T.TabId
inner join {objectQualifier}ModuleDefinitions MD on M.ModuleDefId = MD.ModuleDefId
inner join {objectQualifier}DesktopModules DM on MD.DesktopModuleId = DM.DesktopModuleId
inner join {objectQualifier}ModuleControls MC on MD.ModuleDefId = MC.ModuleDefId
left outer join {objectQualifier}Files F on TM.IconFile = 'fileid=' + convert(varchar,F.FileID)
where  M.IsDeleted = 0  
	and T.IsDeleted = 0  
	and ControlKey is null 
	and DM.IsAdmin = 0
	and (DM.SupportedFeatures & 2 = 2)
	and (T.EndDate < GETDATE() or T.EndDate IS NULL) 
	and (T.StartDate > GETDATE() or T.StartDate IS NULL) 
	and (M.StartDate > GETDATE() or M.StartDate IS NULL) 
	and (M.EndDate < GETDATE() or M.EndDate IS NULL) 
	and (NOT (DM.BusinessControllerClass IS NULL))
	and (T.PortalID = @PortalID OR (T.PortalID IS NULL AND @PortalID Is NULL))
order by TM.ModuleOrder


GO

CREATE procedure {databaseOwner}{objectQualifier}UpdateModuleDefinition

	@ModuleDefId int,    
	@FriendlyName    nvarchar(128),
	@DefaultCacheTime int

as

update {objectQualifier}ModuleDefinitions 
	SET FriendlyName = @FriendlyName,
		DefaultCacheTime = @DefaultCacheTime
	WHERE ModuleDefId = @ModuleDefId

GO

create procedure {databaseOwner}{objectQualifier}GetTabPanes

@TabId    int

as

select distinct(PaneName) as PaneName
from   {objectQualifier}TabModules
where  TabId = @TabId
order by PaneName








GO

create procedure {databaseOwner}{objectQualifier}GetBanners

@VendorId int

as

select BannerId,
       BannerName,
       URL,
       Impressions,
       CPM,
       Views,
       ClickThroughs,
       StartDate,
       EndDate,
       BannerTypeId,
       Description,
       GroupName,
       Criteria,
       Width,
       Height
from   {objectQualifier}Banners
where  VendorId = @VendorId
order  by CreatedDate desc



GO

CREATE procedure {databaseOwner}{objectQualifier}GetModuleByDefinition

@PortalId int,
@FriendlyName nvarchar(128)

as

select M.ModuleID,
       M.ModuleDefID,
       M.ModuleTitle,
       M.AllTabs,
       M.IsDeleted,
       M.InheritViewPermissions,
       M.Header,
       M.Footer,
       M.StartDate,
       M.EndDate,
       M.PortalID,
       TM.TabModuleId,
       TM.TabId,
       TM.PaneName,
       TM.ModuleOrder,
       TM.CacheTime,
       TM.Alignment,
       TM.Color,
       TM.Border,
       TM.Visibility,
       TM.ContainerSrc,
       TM.DisplayTitle,
       TM.DisplayPrint,
       TM.DisplaySyndicate,
       'IconFile' = case when F.FileName is null then TM.IconFile else F.Folder + F.FileName end,
       DM.*
from {objectQualifier}Modules M
inner join {objectQualifier}ModuleDefinitions MD on M.ModuleDefId = MD.ModuleDefId
inner join {objectQualifier}DesktopModules DM on MD.DesktopModuleId = DM.DesktopModuleId
left outer join {objectQualifier}TabModules TM on M.ModuleId = TM.ModuleId
left outer join {objectQualifier}Files F on TM.IconFile = 'fileid=' + convert(varchar,F.FileID)
where  ((M.PortalId = @PortalId) or (M.PortalId is null and @PortalID is null))
and    MD.FriendlyName = @FriendlyName
and M.IsDeleted = 0



GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetAllTabsModules

@PortalId int,
@AllTabs bit

AS

select 
  {objectQualifier}tabmodules.tabid,
  {objectQualifier}Modules.*,
  {objectQualifier}DesktopModules.*
from   {objectQualifier}Modules
inner join {objectQualifier}ModuleDefinitions on {objectQualifier}Modules.ModuleDefID = {objectQualifier}ModuleDefinitions.ModuleDefID
inner join {objectQualifier}DesktopModules on {objectQualifier}ModuleDefinitions.DesktopModuleID = {objectQualifier}DesktopModules.DesktopModuleID
inner join {objectQualifier}TabModules on {objectQualifier}Modules.ModuleID = {objectQualifier}TabModules.ModuleID
where  {objectQualifier}Modules.PortalId = @PortalId and {objectQualifier}Modules.AllTabs = @AllTabs
  and {objectQualifier}tabmodules.tabmoduleid =(select min(tabmoduleid) 
		from {objectQualifier}tabmodules
		where Moduleid = {objectQualifier}Modules.ModuleID)
order by {objectQualifier}Modules.ModuleId





GO
CREATE TABLE {databaseOwner}[{objectQualifier}HostSettings]
(
[SettingName] [nvarchar] (50) NOT NULL,
[SettingValue] [nvarchar] (256) NOT NULL,
[SettingIsSecure] [bit] NOT NULL DEFAULT (0)
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}HostSettings] ADD CONSTRAINT [PK_{objectQualifier}HostSettings] PRIMARY KEY CLUSTERED  ([SettingName])
GO

CREATE procedure {databaseOwner}{objectQualifier}UpdateHostSetting

@SettingName   nvarchar(50),
@SettingValue  nvarchar(256),
@SettingIsSecure bit

as

update {objectQualifier}HostSettings
set    SettingValue = @SettingValue, SettingIsSecure = @SettingIsSecure
where  SettingName = @SettingName


GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateListEntry

@EntryID int, 
@ListName nvarchar(50), 
@Value nvarchar(100), 
@Text nvarchar(150), 
@Description nvarchar(500)

AS

UPDATE {objectQualifier}Lists
SET	
	[ListName] = @ListName,
	[Value] = @Value,
	[Text] = @Text,	
	[Description] = @Description
WHERE 	[EntryID] = @EntryID









GO


create procedure {databaseOwner}{objectQualifier}AddRole

@PortalId         int,
@RoleName         nvarchar(50),
@Description      nvarchar(1000),
@ServiceFee       money,
@BillingPeriod    int,
@BillingFrequency char(1),
@TrialFee         money,
@TrialPeriod      int,
@TrialFrequency   char(1),
@IsPublic         bit,
@AutoAssignment   bit

as

insert into {objectQualifier}Roles (
  PortalId,
  RoleName,
  Description,
  ServiceFee,
  BillingPeriod,
  BillingFrequency,
  TrialFee,
  TrialPeriod,
  TrialFrequency,
  IsPublic,
  AutoAssignment
)
values (
  @PortalId,
  @RoleName,
  @Description,
  @ServiceFee,
  @BillingPeriod,
  @BillingFrequency,
  @TrialFee,
  @TrialPeriod,
  @TrialFrequency,
  @IsPublic,
  @AutoAssignment
)

select SCOPE_IDENTITY()








GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalRoles

@PortalId     int

as

select R.RoleId,
       R.RoleName,
       R.Description,
       'ServiceFee' = case when convert(int,R.ServiceFee) <> 0 then R.ServiceFee else null end,
       'BillingPeriod' = case when convert(int,R.ServiceFee) <> 0 then R.BillingPeriod else null end,
       'BillingFrequency' = case when convert(int,R.ServiceFee) <> 0 then L1.Text else '' end,
       'TrialFee' = case when R.TrialFrequency <> 'N' then R.TrialFee else null end,
       'TrialPeriod' = case when R.TrialFrequency <> 'N' then R.TrialPeriod else null end,
       'TrialFrequency' = case when R.TrialFrequency <> 'N' then L2.Text else '' end,
       'IsPublic' = case when R.IsPublic = 1 then 'True' else 'False' end,
       'AutoAssignment' = case when R.AutoAssignment = 1 then 'True' else 'False' end
from {databaseOwner}{objectQualifier}Roles R
left outer join {databaseOwner}{objectQualifier}Lists L1 on R.BillingFrequency = L1.Value
left outer join {databaseOwner}{objectQualifier}Lists L2 on R.TrialFrequency = L2.Value
where  PortalId = @PortalId
or     PortalId is null
order by R.RoleName








GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetModulePermissionsByModuleID
	@ModuleID int, 
	@PermissionID int
AS

SELECT
	M.[ModulePermissionID],
	M.[ModuleID],
	P.[PermissionID],
	M.[RoleID],
	case M.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'		
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	M.[AllowAccess],
	P.[PermissionCode],
	P.[ModuleDefID],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{objectQualifier}ModulePermission M
LEFT JOIN
	{objectQualifier}Permission P
ON	M.PermissionID = P.PermissionID
LEFT JOIN
	{objectQualifier}ModuleDefinitions MD
ON	P.ModuleDefID = MD.ModuleDefID
LEFT JOIN
	{objectQualifier}Roles R
ON	M.RoleID = R.RoleID
WHERE
	(@ModuleID = -1 OR 
	M.[ModuleID] = @ModuleID
	OR (M.ModuleID IS NULL and P.PermissionCode = 'SYSTEM_MODULE_DEFINITION'))
AND	(P.[PermissionID] = @PermissionID or @PermissionID = -1)




GO

CREATE procedure {databaseOwner}{objectQualifier}DeleteRole

@RoleId int

as

delete 
from {objectQualifier}FolderPermission
where  RoleId = @RoleId

delete 
from {objectQualifier}ModulePermission
where  RoleId = @RoleId

delete 
from {objectQualifier}TabPermission
where  RoleId = @RoleId

delete 
from {objectQualifier}Roles
where  RoleId = @RoleId



GO

create procedure {databaseOwner}{objectQualifier}GetVendorClassifications

@VendorId  int

as

select ClassificationId,
       ClassificationName,
       'IsAssociated' = case when exists ( select 1 from {objectQualifier}VendorClassification vc where vc.VendorId = @VendorId and vc.ClassificationId = {objectQualifier}Classification.ClassificationId ) then 1 else 0 end
from {objectQualifier}Classification







GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTabPermissionsByTabID
	@TabID int, 
	@PermissionID int
AS

SELECT
	M.[TabPermissionID],
	M.[TabID],
	P.[PermissionID],
	M.[RoleID],
	case M.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'		
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	M.[AllowAccess],
	P.[PermissionCode],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}TabPermission M
LEFT JOIN
	{databaseOwner}{objectQualifier}Permission P
ON	M.PermissionID = P.PermissionID
LEFT JOIN
	{databaseOwner}{objectQualifier}Roles R
ON	M.RoleID = R.RoleID
WHERE
	(M.[TabID] = @TabID
	OR (M.TabID IS NULL and P.PermissionCode = 'SYSTEM_TAB'))
AND	(P.[PermissionID] = @PermissionID or @PermissionID = -1)








GO

create procedure {databaseOwner}{objectQualifier}GetUrlLog

@URLTrackingID int,
@StartDate     datetime,
@EndDate       datetime

as

select {objectQualifier}UrlLog.*,
       'FullName' = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName
from   {objectQualifier}UrlLog
inner join {objectQualifier}UrlTracking on {objectQualifier}UrlLog.UrlTrackingId = {objectQualifier}UrlTracking.UrlTrackingId
left outer join {objectQualifier}Users on {objectQualifier}UrlLog.UserId = {objectQualifier}Users.UserId
where  {objectQualifier}UrlLog.UrlTrackingID = @UrlTrackingID
and    ((ClickDate >= @StartDate) or @StartDate is null)
and    ((ClickDate <= @EndDate) or @EndDate is null)
order by ClickDate








GO

CREATE procedure {databaseOwner}{objectQualifier}GetTabsByParentId

@ParentId int

as

select TabID, 
       TabOrder, 
       {objectQualifier}Tabs.PortalID, 
       TabName, 
       IsVisible, 
       ParentId, 
       [Level], 
       'IconFile' = case when Files_1.FileName is null then {objectQualifier}Tabs.IconFile else Files_1.Folder + Files_1.FileName end,
       DisableLink, 
       Title, 
       Description, 
       KeyWords, 
       IsDeleted,
       SkinSrc,
       ContainerSrc,
       TabPath,
       StartDate,
       EndDate,
       'URL' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Tabs.URL else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end
from   {objectQualifier}Tabs
left outer join {objectQualifier}Files on {objectQualifier}Tabs.URL = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
left outer join {objectQualifier}Files Files_1 ON {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,Files_1.FileID)
where  {objectQualifier}Tabs.ParentId = @ParentId
order by TabOrder



GO

create procedure {databaseOwner}{objectQualifier}GetModule

@ModuleId int,
@TabId    int

as

select M.ModuleID,
       M.ModuleDefID,
       M.ModuleTitle,
       M.AllTabs,
       M.IsDeleted,
       M.InheritViewPermissions,
       M.Header,
       M.Footer,
       M.StartDate,
       M.EndDate,
       M.PortalID,
       TM.TabModuleId,
       TM.TabId,
       TM.PaneName,
       TM.ModuleOrder,
       TM.CacheTime,
       TM.Alignment,
       TM.Color,
       TM.Border,
       TM.Visibility,
       TM.ContainerSrc,
       TM.DisplayTitle,
       TM.DisplayPrint,
       TM.DisplaySyndicate,
       'IconFile' = case when F.FileName is null then TM.IconFile else F.Folder + F.FileName end,
       DM.*
from {objectQualifier}Modules M
inner join {objectQualifier}ModuleDefinitions MD on M.ModuleDefId = MD.ModuleDefId
inner join {objectQualifier}DesktopModules DM on MD.DesktopModuleId = DM.DesktopModuleId
left outer join {objectQualifier}TabModules TM on M.ModuleId = TM.ModuleId
left outer join {objectQualifier}Files F on TM.IconFile = 'fileid=' + convert(varchar,F.FileID)
where   M.ModuleId = @ModuleId
and     (TM.TabId = @TabId or @TabId is null)







GO

create procedure {databaseOwner}{objectQualifier}AddModule
    
@PortalId                      int,
@ModuleDefId                   int,
@ModuleTitle                   nvarchar(256),
@AllTabs                       bit,
@Header                        text,
@Footer                        text,
@StartDate                     datetime,
@EndDate                       datetime,
@InheritViewPermissions        bit,
@IsDeleted                     bit

as

insert into {objectQualifier}Modules ( 
  PortalId,
  ModuleDefId,
  ModuleTitle,
  AllTabs,
  Header,
  Footer, 
  StartDate,
  EndDate,
  InheritViewPermissions,
  IsDeleted
)
values (
  @PortalId,
  @ModuleDefId,
  @ModuleTitle,
  @AllTabs,
  @Header,
  @Footer, 
  @StartDate,
  @EndDate,
  @InheritViewPermissions,
  @IsDeleted
)

select SCOPE_IDENTITY()








GO

create procedure {databaseOwner}{objectQualifier}GetPortalDesktopModules

@PortalId int,
@DesktopModuleId int

as

select {objectQualifier}PortalDesktopModules.*,
       PortalName,
       FriendlyName
from   {objectQualifier}PortalDesktopModules
inner join {objectQualifier}Portals on {objectQualifier}PortalDesktopModules.PortalId = {objectQualifier}Portals.PortalId
inner join {objectQualifier}DesktopModules on {objectQualifier}PortalDesktopModules.DesktopModuleId = {objectQualifier}DesktopModules.DesktopModuleId
where  (({objectQualifier}PortalDesktopModules.PortalId = @PortalId) or @PortalId is null)
and    (({objectQualifier}PortalDesktopModules.DesktopModuleId = @DesktopModuleId) or @DesktopModuleId is null)
order by {objectQualifier}PortalDesktopModules.PortalId, {objectQualifier}PortalDesktopModules.DesktopModuleId








GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTabPermissionsByPortal
	@PortalID int
AS

SELECT
	R.PortalID,
	TP.[TabPermissionID],
	TP.[TabID],
	P.[PermissionID],
	TP.[RoleID],
	case TP.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	TP.[AllowAccess],
	P.[PermissionCode],
	P.[ModuleDefID],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{databaseOwner}{objectQualifier}TabPermission TP
INNER JOIN {databaseOwner}{objectQualifier}Tabs T
ON	TP.TabID = T.TabID
LEFT JOIN {databaseOwner}{objectQualifier}Permission P
ON	TP.PermissionID = P.PermissionID
LEFT JOIN {databaseOwner}{objectQualifier}Roles R
ON	TP.RoleID = R.RoleID
WHERE 	T.PortalID = @PortalID


GO

create procedure {databaseOwner}{objectQualifier}DeleteUser

@UserId   int

as

delete
from {objectQualifier}Users
where  UserId = @UserId

GO

CREATE procedure {databaseOwner}{objectQualifier}DeleteUserPortal
	@UserId   int,
	@PortalId int
AS

DELETE FROM {objectQualifier}UserPortals
WHERE Userid = @UserId and PortalId = @PortalId

GO

create procedure {databaseOwner}{objectQualifier}GetDesktopModules

as

select *
from   {objectQualifier}DesktopModules
where  IsAdmin = 0
order  by FriendlyName

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetModulePermissionsByPortal
	
@PortalID int

AS

select MP.[ModulePermissionID],
       MP.[ModuleID],
       P.[PermissionID],
       MP.[RoleID],
       case MP.RoleID
         when -1 then 'All Users'
         when -2 then 'Superuser'
         when -3 then 'Unauthenticated Users'
         else R.RoleName
       end
       'RoleName',
       MP.[AllowAccess],
       P.[PermissionCode],
       P.[ModuleDefID],
       P.[PermissionKey],
       P.[PermissionName]
from   {databaseOwner}{objectQualifier}ModulePermission MP
inner join {databaseOwner}{objectQualifier}Modules M on MP.ModuleID = M.ModuleID
left join {databaseOwner}{objectQualifier}Permission P on MP.PermissionID = P.PermissionID
left join {databaseOwner}{objectQualifier}ModuleDefinitions MD on P.ModuleDefID = MD.ModuleDefID
left join {databaseOwner}{objectQualifier}Roles R on MP.RoleID = R.RoleID
where  M.PortalID = @PortalID








GO

create procedure {databaseOwner}{objectQualifier}UpdateBannerViews

@BannerId  int, 
@StartDate datetime, 
@EndDate   datetime

as

update {objectQualifier}Banners
set    Views = Views + 1,
       StartDate = @StartDate,
       EndDate = @EndDate
where  BannerId = @BannerId








GO

CREATE procedure {databaseOwner}{objectQualifier}UpdatePortalInfo

@PortalId           int,
@PortalName         nvarchar(128),
@LogoFile           nvarchar(50),
@FooterText         nvarchar(100),
@ExpiryDate         datetime,
@UserRegistration   int,
@BannerAdvertising  int,
@Currency           char(3),
@AdministratorId    int,
@HostFee            money,
@HostSpace          int,
@PaymentProcessor   nvarchar(50),
@ProcessorUserId    nvarchar(50),
@ProcessorPassword  nvarchar(50),
@Description        nvarchar(500),
@KeyWords           nvarchar(500),
@BackgroundFile     nvarchar(50),
@SiteLogHistory     int,
@SplashTabId          int,
@HomeTabId          int,
@LoginTabId         int,
@UserTabId          int,
@DefaultLanguage    nvarchar(6),
@TimeZoneOffset	    int,
@HomeDirectory varchar(100)

as

update {databaseOwner}{objectQualifier}Portals
set    PortalName = @PortalName,
       LogoFile = @LogoFile,
       FooterText = @FooterText,
       ExpiryDate = @ExpiryDate,
       UserRegistration = @UserRegistration,
       BannerAdvertising = @BannerAdvertising,
       Currency = @Currency,
       AdministratorId = @AdministratorId,
       HostFee = @HostFee,
       HostSpace = @HostSpace,
       PaymentProcessor = @PaymentProcessor,
       ProcessorUserId = @ProcessorUserId,
       ProcessorPassword = @ProcessorPassword,
       Description = @Description,
       KeyWords = @KeyWords,
       BackgroundFile = @BackgroundFile,
       SiteLogHistory = @SiteLogHistory,
       SplashTabId = @SplashTabId,
       HomeTabId = @HomeTabId,
       LoginTabId = @LoginTabId,
       UserTabId = @UserTabId,
       DefaultLanguage = @DefaultLanguage,
       TimeZoneOffset = @TimeZoneOffset,
       HomeDirectory = @HomeDirectory
where  PortalId = @PortalId








GO

CREATE procedure {databaseOwner}{objectQualifier}GetUserRolesByUsername

@PortalId int, 
@Username nvarchar(100), 
@Rolename nvarchar(50)

as

SELECT	R.*,        
        'FullName' = U.FirstName + ' ' + U.LastName,
        UR.UserRoleID,
        UR.UserID,
        UR.ExpiryDate,
        UR.IsTrialUsed
FROM	{objectQualifier}UserRoles UR
INNER JOIN {objectQualifier}Users U ON UR.UserID = U.UserID
INNER JOIN {objectQualifier}Roles R ON R.RoleID = UR.RoleID
WHERE  R.PortalId = @PortalId
AND    (U.Username = @Username or @Username is NULL)
AND    (R.Rolename = @Rolename or @RoleName is NULL)





GO

create procedure {databaseOwner}{objectQualifier}GetAffiliate

@AffiliateId int,
@VendorId int,
@PortalID int

as

select {objectQualifier}Affiliates.AffiliateId,
       {objectQualifier}Affiliates.VendorId,
       {objectQualifier}Affiliates.StartDate,
       {objectQualifier}Affiliates.EndDate,
       {objectQualifier}Affiliates.CPC,
       {objectQualifier}Affiliates.Clicks,
       {objectQualifier}Affiliates.CPA,
       {objectQualifier}Affiliates.Acquisitions
from   {objectQualifier}Affiliates INNER JOIN {objectQualifier}Vendors ON {objectQualifier}Affiliates.VendorId = {objectQualifier}Vendors.VendorId
where  {objectQualifier}Affiliates.AffiliateId = @AffiliateId
and    {objectQualifier}Affiliates.VendorId = @VendorId
and	 {objectQualifier}Vendors.PortalId=@PortalID







GO
CREATE TABLE {databaseOwner}[{objectQualifier}UsersOnline]
(
[UserID] [int] NOT NULL,
[PortalID] [int] NOT NULL,
[TabID] [int] NOT NULL,
[CreationDate] [datetime] NOT NULL DEFAULT (getdate()),
[LastActiveDate] [datetime] NOT NULL DEFAULT (getdate())
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] ADD CONSTRAINT [PK_{objectQualifier}UsersOnline] PRIMARY KEY CLUSTERED  ([UserID], [PortalID])
GO

create procedure {databaseOwner}{objectQualifier}GetModuleControlsByKey

@ControlKey        nvarchar(50),
@ModuleDefId       int

as

select {objectQualifier}ModuleDefinitions.*,
       ModuleControlID,
       ControlTitle,
       ControlSrc,
       IconFile,
       ControlType,
       HelpUrl
from   {objectQualifier}ModuleControls
left outer join {objectQualifier}ModuleDefinitions on {objectQualifier}ModuleControls.ModuleDefId = {objectQualifier}ModuleDefinitions.ModuleDefId
where  ((ControlKey is null and @ControlKey is null) or (ControlKey = @ControlKey))
and    (({objectQualifier}ModuleControls.ModuleDefId is null and @ModuleDefId is null) or ({objectQualifier}ModuleControls.ModuleDefId = @ModuleDefId))
and    ControlType >= -1
order by ViewOrder








GO

create procedure {databaseOwner}{objectQualifier}GetSiteLog2

@PortalId int,
@PortalAlias nvarchar(50),
@StartDate datetime,
@EndDate datetime

as

select {objectQualifier}SiteLog.DateTime,
 'Name' = 
 case
when {objectQualifier}SiteLog.UserId is null then null
else {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName
end,
 'Referrer' = 
 case 
 when {objectQualifier}SiteLog.Referrer like '%' + @PortalAlias + '%' then null 
 else {objectQualifier}SiteLog.Referrer
 end,
 'UserAgent' = 
 case 
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 1%' then 'Internet Explorer 1'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 2%' then 'Internet Explorer 2'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 3%' then 'Internet Explorer 3'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 4%' then 'Internet Explorer 4'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 5%' then 'Internet Explorer 5'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE 6%' then 'Internet Explorer 6'
 when {objectQualifier}SiteLog.UserAgent like '%MSIE%' then 'Internet Explorer'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/1%' then 'Netscape Navigator 1'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/2%' then 'Netscape Navigator 2'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/3%' then 'Netscape Navigator 3'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/4%' then 'Netscape Navigator 4'
 when {objectQualifier}SiteLog.UserAgent like '%Mozilla/5%' then 'Netscape Navigator 6+'
 else {objectQualifier}SiteLog.UserAgent
 end,
 {objectQualifier}SiteLog.UserHostAddress,
 {objectQualifier}Tabs.TabName
from {objectQualifier}SiteLog
left outer join {objectQualifier}Users on {objectQualifier}SiteLog.UserId = {objectQualifier}Users.UserId 
left outer join {objectQualifier}Tabs on {objectQualifier}SiteLog.TabId = {objectQualifier}Tabs.TabId 
where {objectQualifier}SiteLog.PortalId = @PortalId
and {objectQualifier}SiteLog.DateTime between @StartDate and @EndDate
order by {objectQualifier}SiteLog.DateTime desc








GO


CREATE procedure {databaseOwner}{objectQualifier}GetTabs

@PortalId int

as

select TabID, 
       TabOrder, 
       {objectQualifier}Tabs.PortalID, 
       TabName, 
       IsVisible, 
       ParentId, 
       [Level], 
       'IconFile' = case when {objectQualifier}Files_1.FileName is null then {objectQualifier}Tabs.IconFile else {objectQualifier}Files_1.Folder + {objectQualifier}Files_1.FileName end,
       DisableLink, 
       Title, 
       Description, 
       KeyWords, 
       IsDeleted,
       SkinSrc,
       ContainerSrc,
       TabPath,
       StartDate,
       EndDate,
       'URL' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Tabs.URL else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       'HasChildren' = case when exists (select 1 from {objectQualifier}Tabs T2 where T2.ParentId = {objectQualifier}Tabs.TabId) then 'true' else 'false' end
from   {objectQualifier}Tabs
left outer join {objectQualifier}Files on {objectQualifier}Tabs.URL = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
left outer join {objectQualifier}Files {objectQualifier}Files_1 ON {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,{objectQualifier}Files_1.FileID)
where  {objectQualifier}Tabs.PortalId = @PortalId
order by TabOrder, TabName









GO

create procedure {databaseOwner}{objectQualifier}VerifyPortalTab

@PortalId int,
@TabId    int

as

select {objectQualifier}Tabs.TabId
from {objectQualifier}Tabs
left outer join {objectQualifier}Portals on {objectQualifier}Tabs.PortalId = {objectQualifier}Portals.PortalId
where  TabId = @TabId
and    ( {objectQualifier}Portals.PortalId = @PortalId or {objectQualifier}Tabs.PortalId is null )
and    IsDeleted = 0








GO

create procedure {databaseOwner}{objectQualifier}GetModules

@PortalId int

as

select {objectQualifier}Modules.*,
       {objectQualifier}DesktopModules.*
from   {objectQualifier}Modules
inner join {objectQualifier}ModuleDefinitions on {objectQualifier}Modules.ModuleDefID = {objectQualifier}ModuleDefinitions.ModuleDefID
inner join {objectQualifier}DesktopModules on {objectQualifier}ModuleDefinitions.DesktopModuleID = {objectQualifier}DesktopModules.DesktopModuleID
where  {objectQualifier}Modules.PortalId = @PortalId
order by {objectQualifier}Modules.ModuleId








GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserPortals]
(
[UserId] [int] NOT NULL,
[PortalId] [int] NOT NULL,
[UserPortalId] [int] NOT NULL IDENTITY(1, 1),
[CreatedDate] [datetime] NOT NULL DEFAULT (getdate())
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD CONSTRAINT [PK_{objectQualifier}UserPortals] PRIMARY KEY CLUSTERED  ([UserId], [PortalId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserPortals_1] ON {databaseOwner}[{objectQualifier}UserPortals] ([UserId])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserPortals] ON {databaseOwner}[{objectQualifier}UserPortals] ([PortalId])
GO

create procedure {databaseOwner}{objectQualifier}UpdateBanner

@BannerId     int,
@BannerName   nvarchar(100),
@ImageFile    nvarchar(100),
@URL          nvarchar(255),
@Impressions  int,
@CPM          float,
@StartDate    datetime,
@EndDate      datetime,
@UserName     nvarchar(100),
@BannerTypeId int,
@Description  nvarchar(2000),
@GroupName    nvarchar(100),
@Criteria     bit,
@Width        int,
@Height       int

as

update {objectQualifier}Banners
set    ImageFile     = @ImageFile,
       BannerName    = @BannerName,
       URL           = @URL,
       Impressions   = @Impressions,
       CPM           = @CPM,
       StartDate     = @StartDate,
       EndDate       = @EndDate,
       CreatedByUser = @UserName,
       CreatedDate   = getdate(),
       BannerTypeId  = @BannerTypeId,
       Description   = @Description,
       GroupName     = @GroupName,
       Criteria      = @Criteria,
       Width         = @Width,
       Height        = @Height
where  BannerId = @BannerId 



GO

create procedure {databaseOwner}{objectQualifier}DeleteTabModule

@TabId      int,
@ModuleId   int

as

delete
from   {objectQualifier}TabModules 
where  TabId = @TabId
and    ModuleId = @ModuleId







GO

create procedure {databaseOwner}{objectQualifier}GetUserRole

@PortalId int, 
@UserId int, 
@RoleId int

as

select	r.*, 
        ur.UserRoleID, 
        ur.UserID, 
        ur.ExpiryDate, 
        ur.IsTrialUsed
from	{objectQualifier}UserRoles ur
inner join {objectQualifier}UserPortals up on ur.UserId = up.UserId
inner join {objectQualifier}Roles r on r.RoleID = ur.RoleID
where   up.UserId = @UserId
and     up.PortalId = @PortalId
and     ur.RoleId = @RoleId






GO
CREATE TABLE {databaseOwner}[{objectQualifier}AnonymousUsers]
(
[UserID] [char] (36) NOT NULL,
[PortalID] [int] NOT NULL,
[TabID] [int] NOT NULL,
[CreationDate] [datetime] NOT NULL DEFAULT (getdate()),
[LastActiveDate] [datetime] NOT NULL DEFAULT (getdate())
)

GO
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers] ADD CONSTRAINT [PK_{objectQualifier}AnonymousUsers] PRIMARY KEY CLUSTERED  ([UserID], [PortalID])
GO

create procedure {databaseOwner}{objectQualifier}UpdateAnonymousUser

@UserID 	char(36),
@PortalID 	int,
@TabID 		int,
@LastActiveDate datetime 

as
BEGIN
	IF EXISTS (SELECT UserID FROM {objectQualifier}AnonymousUsers WHERE UserID = @UserID and PortalID = @PortalID)
		UPDATE 
			{objectQualifier}AnonymousUsers
		SET 
			TabID = @TabID,
			LastActiveDate = @LastActiveDate
		WHERE
			UserID = @UserID
			and 
			PortalID = @PortalID
	ELSE
		INSERT INTO
			{objectQualifier}AnonymousUsers
			(UserID, PortalID, TabID, CreationDate, LastActiveDate) 
		VALUES
			(@UserId, @PortalID, @TabID, GetDate(), @LastActiveDate)

END








GO

create procedure {databaseOwner}{objectQualifier}GetUsers

@PortalId int

as

select *
from {objectQualifier}Users U
left join {objectQualifier}UserPortals UP on U.UserId = UP.UserId
where ( UP.PortalId = @PortalId or @PortalId is null )
order by U.FirstName + ' ' + U.LastName   






GO

create procedure {databaseOwner}{objectQualifier}VerifyPortal

@PortalId int

as

select {objectQualifier}Tabs.TabId
from {objectQualifier}Tabs
inner join {objectQualifier}Portals on {objectQualifier}Tabs.PortalId = {objectQualifier}Portals.PortalId
where {objectQualifier}Portals.PortalId = @PortalId
and {objectQualifier}Tabs.TabOrder = 1  








GO

create procedure {databaseOwner}{objectQualifier}GetUser

@PortalId int,
@UserId int

as

select U.UserId,
       UP.PortalId,
       U.Username,
       'FullName' = U.FirstName + ' ' + U.LastName,
       U.FirstName,
       U.LastName,
       U.IsSuperUser
from {objectQualifier}Users U
left outer join {objectQualifier}UserPortals UP On U.UserId = UP.UserId
where  U.UserId = @UserId
and    (UP.PortalId = @PortalId or U.IsSuperUser = 1)






GO



CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateListSortOrder
(
@EntryID	int, 
@MoveUp		bit
)
AS
DECLARE @EntryListName nvarchar(50)
DECLARE @ParentID int
DECLARE @CurrentSortValue int
DECLARE @ReplaceSortValue int
-- Get the current sort order
SELECT @CurrentSortValue = [SortOrder], @EntryListName = [ListName], @ParentID = [ParentID] FROM {objectQualifier}Lists (nolock) WHERE [EntryID] = @EntryID
-- Move the item up or down?
IF (@MoveUp = 1)
  BEGIN
    IF (@CurrentSortValue != 1) -- we rearrange sort order only if list enable sort order - sortorder >= 1
      BEGIN
        SET @ReplaceSortValue = @CurrentSortValue - 1
        UPDATE {objectQualifier}Lists SET [SortOrder] = @CurrentSortValue WHERE [SortOrder] = @ReplaceSortValue And [ListName] = @EntryListName And [ParentID] = @ParentID
        UPDATE {objectQualifier}Lists SET [SortOrder] = @ReplaceSortValue WHERE [EntryID] = @EntryID
      END
  END
ELSE
  BEGIN
    IF (@CurrentSortValue < (SELECT MAX([SortOrder]) FROM {objectQualifier}Lists))
    BEGIN
      SET @ReplaceSortValue = @CurrentSortValue + 1
      UPDATE {objectQualifier}Lists SET [SortOrder] = @CurrentSortValue WHERE SortOrder = @ReplaceSortValue And [ListName] = @EntryListName  And [ParentID] = @ParentID
      UPDATE {objectQualifier}Lists SET [SortOrder] = @ReplaceSortValue WHERE EntryID = @EntryID
    END
  END







GO

create procedure {databaseOwner}{objectQualifier}UpdateUrlTrackingStats

@PortalID     int,
@Url          nvarchar(255),
@ModuleId     int

as

update {objectQualifier}UrlTracking
set    Clicks = Clicks + 1,
       LastClick = getdate()
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))
   







GO

CREATE procedure {databaseOwner}{objectQualifier}AddVendor

@PortalId 	int,
@VendorName nvarchar(50),
@Unit    	nvarchar(50),
@Street 	nvarchar(50),
@City		nvarchar(50),
@Region	    nvarchar(50),
@Country	nvarchar(50),
@PostalCode	nvarchar(50),
@Telephone	nvarchar(50),
@Fax   	    nvarchar(50),
@Cell   	nvarchar(50),
@Email    	nvarchar(50),
@Website	nvarchar(100),
@FirstName	nvarchar(50),
@LastName	nvarchar(50),
@UserName   nvarchar(100),
@LogoFile   nvarchar(100),
@KeyWords   text,
@Authorized bit

as

insert into {objectQualifier}Vendors (
  VendorName,
  Unit,
  Street,
  City,
  Region,
  Country,
  PostalCode,
  Telephone,
  PortalId,
  Fax,
  Cell,
  Email,
  Website,
  FirstName,
  Lastname,
  ClickThroughs,
  Views,
  CreatedByUser,
  CreatedDate,
  LogoFile,
  KeyWords,
  Authorized
)
values (
  @VendorName,
  @Unit,
  @Street,
  @City,
  @Region,
  @Country,
  @PostalCode,
  @Telephone,
  @PortalId,
  @Fax,
  @Cell,
  @Email,
  @Website,
  @FirstName,
  @LastName,
  0,
  0,
  @UserName,
  getdate(), 
  @LogoFile,
  @KeyWords,
  @Authorized
)

select SCOPE_IDENTITY()







GO


create procedure {databaseOwner}{objectQualifier}GetRolesByUser
    
@UserId        int,
@PortalId      int

as

select {objectQualifier}Roles.RoleName,
       {objectQualifier}Roles.RoleId
from {objectQualifier}UserRoles
inner join {objectQualifier}Users on {objectQualifier}UserRoles.UserId = {objectQualifier}Users.UserId
inner join {objectQualifier}Roles on {objectQualifier}UserRoles.RoleId = {objectQualifier}Roles.RoleId
where  {objectQualifier}Users.UserId = @UserId
and    {objectQualifier}Roles.PortalId = @PortalId
and    (ExpiryDate >= getdate() or ExpiryDate is null)









GO

create procedure {databaseOwner}{objectQualifier}GetSearchSettings

	@ModuleID	int

AS

select     	tm.ModuleID, 
			settings.SettingName, 
			settings.SettingValue
from	{objectQualifier}Tabs searchTabs INNER JOIN
		{objectQualifier}TabModules searchTabModules ON searchTabs.TabID = searchTabModules.TabID INNER JOIN
        {objectQualifier}Portals p ON searchTabs.PortalID = p.PortalID INNER JOIN
        {objectQualifier}Tabs t ON p.PortalID = t.PortalID INNER JOIN
        {objectQualifier}TabModules tm ON t.TabID = tm.TabID INNER JOIN
        {objectQualifier}ModuleSettings settings ON searchTabModules.ModuleID = settings.ModuleID
where   searchTabs.TabName = N'Search Admin'
and		tm.ModuleID = @ModuleID








GO


create procedure {databaseOwner}{objectQualifier}DeleteVendor

@VendorId int

as

delete
from {objectQualifier}Vendors
where  VendorId = @VendorId









GO

CREATE procedure {databaseOwner}{objectQualifier}GetServices
    
@PortalId  int,
@UserId    int = null

as

select RoleId,
       R.RoleName,
       R.Description,
       'ServiceFee' = case when convert(int,R.ServiceFee) <> 0 then R.ServiceFee else null end,
       'BillingPeriod' = case when convert(int,R.ServiceFee) <> 0 then R.BillingPeriod else null end,
       'BillingFrequency' = case when convert(int,R.ServiceFee) <> 0 then L1.[Text] else '' end,
       'TrialFee' = case when R.TrialFrequency <> 'N' then R.TrialFee else null end,
       'TrialPeriod' = case when R.TrialFrequency <> 'N' then R.TrialPeriod else null end,
       'TrialFrequency' = case when R.TrialFrequency <> 'N' then L2.[Text] else '' end,
       'ExpiryDate' = ( select ExpiryDate from {databaseOwner}{objectQualifier}UserRoles where {databaseOwner}{objectQualifier}UserRoles.RoleId = R.RoleId and {databaseOwner}{objectQualifier}UserRoles.UserId = @UserId ),
       'Subscribed' = ( select UserRoleId from {databaseOwner}{objectQualifier}UserRoles where {databaseOwner}{objectQualifier}UserRoles.RoleId = R.RoleId and {databaseOwner}{objectQualifier}UserRoles.UserId = @UserId )
from {databaseOwner}{objectQualifier}Roles R
inner join {databaseOwner}{objectQualifier}Lists L1 on R.BillingFrequency = L1.Value
left outer join {databaseOwner}{objectQualifier}Lists L2 on R.TrialFrequency = L2.Value
where  R.PortalId = @PortalId
and    R.IsPublic = 1
and L1.ListName='Frequency'
and L2.ListName='Frequency'








GO

create procedure {databaseOwner}{objectQualifier}GetModuleDefinition

@ModuleDefId int

as

select *
from {objectQualifier}ModuleDefinitions
where  ModuleDefId = @ModuleDefId








GO

CREATE procedure {databaseOwner}{objectQualifier}GetSearchResults
	@PortalID int,
	@Word nVarChar(100)
AS
SELECT si.SearchItemID,
	sw.Word,
	siw.Occurrences,
	siw.Occurrences + 1000 as Relevance,
	m.ModuleID,
	tm.TabID,
	si.Title,
	si.Description,
	si.Author,
	si.PubDate,
	si.SearchKey,
	si.Guid,
	si.ImageFileId,
	u.FirstName + ' ' + u.LastName As AuthorName
FROM {objectQualifier}SearchWord sw
	INNER JOIN {objectQualifier}SearchItemWord siw ON sw.SearchWordsID = siw.SearchWordsID
	INNER JOIN {objectQualifier}SearchItem si ON siw.SearchItemID = si.SearchItemID
	INNER JOIN {objectQualifier}Modules m ON si.ModuleId = m.ModuleID
	LEFT OUTER JOIN {objectQualifier}TabModules tm ON si.ModuleId = tm.ModuleID
	INNER JOIN {objectQualifier}Tabs t ON tm.TabID = t.TabID
	LEFT OUTER JOIN {objectQualifier}Users u ON si.Author = u.UserID
WHERE 
	(((m.StartDate Is Null) OR (GetDate() > m.StartDate)) AND ((m.EndDate Is Null) OR (GetDate() < m.EndDate)))
	AND (((t.StartDate Is Null) OR (GetDate() > t.StartDate)) AND ((t.EndDate Is Null) OR (GetDate() < t.EndDate)))
	AND (sw.Word = @Word) 
	AND (t.IsDeleted = 0) 
	AND (m.IsDeleted = 0) 
	AND (t.PortalID = @PortalID)




GO

create procedure {databaseOwner}{objectQualifier}AddUser

@PortalID	int,
@Username	nvarchar(100),
@FirstName	nvarchar(50),
@LastName	nvarchar(50),
@AffiliateId    int,
@IsSuperUser    bit,
@Email          nvarchar(256)

as

declare @UserID int

select @UserID = UserID
from   {objectQualifier}Users
where  Username = @Username

if @UserID is null
begin
  insert into {objectQualifier}Users (
    Username,
    FirstName, 
    LastName, 
    AffiliateId,
    IsSuperUser,
    Email
  )
  values (
    @Username,
    @FirstName, 
    @LastName, 
    @AffiliateId,
    @IsSuperUser,
    @Email
  )

  select @UserID = SCOPE_IDENTITY()
end

if @IsSuperUser = 0
begin
  if not exists ( select 1 from {objectQualifier}UserPortals where UserID = @UserID and PortalID = @PortalID )
  begin
    insert into {objectQualifier}UserPortals (
      UserID,
      PortalID
    )
    values (
      @UserID,
      @PortalID
    )
  end
end

select @UserID


GO


create procedure {databaseOwner}{objectQualifier}GetRoles

as

select *
from   {databaseOwner}{objectQualifier}Roles








GO

CREATE procedure {databaseOwner}{objectQualifier}GetBanner

@BannerId int,
@VendorId int,
@PortalID int

as

select {objectQualifier}Banners.BannerId,
       {objectQualifier}Banners.VendorId,
       'ImageFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Banners.ImageFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       {objectQualifier}Banners.BannerName,
       {objectQualifier}Banners.Impressions,
       {objectQualifier}Banners.CPM,
       {objectQualifier}Banners.Views,
       {objectQualifier}Banners.ClickThroughs,
       {objectQualifier}Banners.StartDate,
       {objectQualifier}Banners.EndDate,
       'CreatedByUser' = {objectQualifier}Users.FirstName + ' ' + {objectQualifier}Users.LastName,
       {objectQualifier}Banners.CreatedDate,
       {objectQualifier}Banners.BannerTypeId,
       {objectQualifier}Banners.Description,
       {objectQualifier}Banners.GroupName,
       {objectQualifier}Banners.Criteria,
       {objectQualifier}Banners.URL,        
       {objectQualifier}Banners.Width,
       {objectQualifier}Banners.Height
FROM   {objectQualifier}Banners 
INNER JOIN {objectQualifier}Vendors ON {objectQualifier}Banners.VendorId = {objectQualifier}Vendors.VendorId 
LEFT OUTER JOIN {objectQualifier}Users ON {objectQualifier}Banners.CreatedByUser = {objectQualifier}Users.UserID
left outer join {objectQualifier}Files on {objectQualifier}Banners.ImageFile = 'FileId=' + convert(varchar,{objectQualifier}Files.FileID)
where  {objectQualifier}Banners.BannerId = @BannerId
and   {objectQualifier}Banners.vendorId = @VendorId
AND ({objectQualifier}Vendors.PortalId = @PortalID or ({objectQualifier}Vendors.PortalId is null and @portalid is null))



GO


create procedure {databaseOwner}{objectQualifier}GetVendors

@PortalId int,
@Filter   nvarchar(1)

as

select {objectQualifier}Vendors.*,
       'Banners' = ( select count(*) from {objectQualifier}Banners where {objectQualifier}Banners.VendorId = {objectQualifier}Vendors.VendorId )
from   {objectQualifier}Vendors 
where  ( @Filter = '-' and Authorized = 0 AND ((PortalId = @PortalId) or (@PortalId is null and PortalId is null)) )
or     ( @Filter <> '-' and VendorName like @Filter + '%' and ((PortalId = @PortalId) or (@PortalId is null and PortalId is null)) )
order by VendorName








GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalByTab

@TabId int,
@HTTPAlias nvarchar(200)
 
as

select HTTPAlias
from {databaseOwner}{objectQualifier}PortalAlias
inner join {databaseOwner}{objectQualifier}Tabs on {databaseOwner}{objectQualifier}PortalAlias.PortalId = {databaseOwner}{objectQualifier}Tabs.PortalId
where  TabId = @TabId
and    HTTPAlias = @HTTPAlias 








GO

CREATE procedure {databaseOwner}{objectQualifier}AddPortalInfo
@PortalName         nvarchar(128),
@Currency           char(3),
@FirstName          nvarchar(100),
@LastName           nvarchar(100),
@Username           nvarchar(100),
@Password           nvarchar(50),
@Email              nvarchar(100),
@ExpiryDate         datetime,
@HostFee            money,
@HostSpace          int,
@SiteLogHistory     int,
@HomeDirectory varchar(100)

as

DECLARE @PortalID int

insert into {databaseOwner}{objectQualifier}Portals (
  PortalName,
  ExpiryDate,
  UserRegistration,
  BannerAdvertising,
  Currency,
  HostFee,
  HostSpace,
  Description,
  KeyWords,
  SiteLogHistory,
  HomeDirectory
)
values (
  @PortalName,
  @ExpiryDate,
  0,
  0,
  @Currency,
  @HostFee,
  @HostSpace,
  @PortalName,
  @PortalName,
  @SiteLogHistory,
  @HomeDirectory
)

SET @PortalID = SCOPE_IDENTITY()

IF @HomeDirectory = ''
BEGIN
	UPDATE {databaseOwner}{objectQualifier}Portals SET HomeDirectory = 'Portals/' + convert(varchar(10), @PortalID) WHERE PortalID = @PortalID
END

SELECT @PortalID








GO


create procedure {databaseOwner}{objectQualifier}AddBanner

@BannerName    nvarchar(100),
@VendorId      int,
@ImageFile     nvarchar(100),
@URL           nvarchar(255),
@Impressions   int,
@CPM           float,
@StartDate     datetime,
@EndDate       datetime,
@UserName      nvarchar(100),
@BannerTypeId  int,
@Description   nvarchar(2000),
@GroupName     nvarchar(100),
@Criteria      bit,
@Width         int,
@Height        int

as

insert into {objectQualifier}Banners (
    VendorId,
    ImageFile,
    BannerName,
    URL,
    Impressions,
    CPM,
    Views,
    ClickThroughs,
    StartDate,
    EndDate,
    CreatedByUser,
    CreatedDate,
    BannerTypeId,
    Description,
    GroupName,
    Criteria,
    Width,
    Height
)
values (
    @VendorId,
    @ImageFile,
    @BannerName,
    @URL,
    @Impressions,
    @CPM,
    0,
    0,
    @StartDate,
    @EndDate,
    @UserName,
    getdate(),
    @BannerTypeId,
    @Description,
    @GroupName,
    @Criteria,
    @Width,
    @Height
)

select SCOPE_IDENTITY()



GO

CREATE procedure {databaseOwner}{objectQualifier}AddListEntry

@ListName nvarchar(50), 
@Value nvarchar(100), 
@Text nvarchar(150), 
@ParentKey nvarchar(150), 
@EnableSortOrder bit,
@DefinitionID int, 
@Description nvarchar(500)

as

DECLARE @ParentID int
DECLARE @Level int
DECLARE @SortOrder int

IF @EnableSortOrder = 1
BEGIN
	SET @SortOrder = IsNull((SELECT MAX ([SortOrder]) From {objectQualifier}Lists Where [ListName] = @ListName), 0) + 1
END
ELSE
BEGIN
	SET @SortOrder = 0
END


If @ParentKey <> ''
BEGIN
	DECLARE @ParentListName nvarchar(50)
	DECLARE @ParentValue nvarchar(100)
	SET @ParentListName = LEFT(@ParentKey, CHARINDEX( '.', @ParentKey) - 1)
	SET @ParentValue = RIGHT(@ParentKey, LEN(@ParentKey) -  CHARINDEX( '.', @ParentKey))
	SELECT @ParentID = [EntryID], @Level = ([Level] + 1) From {objectQualifier}Lists Where [ListName] = @ParentListName And [Value] = @ParentValue

	Print 'ParentListName: ' + @ParentListName
	Print 'ParentValue: ' + @ParentValue
	--Print @ParentID
END
ELSE
BEGIN
	SET @ParentID = 0
	SET @Level = 0
END

-- Check if this entry exists
If EXISTS (SELECT [EntryID] From {objectQualifier}Lists WHERE [ListName] = @ListName And [Value] = @Value And [Text] = @Text And [ParentID] = @ParentID)
BEGIN
select -1
Return 
END

insert into {objectQualifier}Lists 
	(
  	[ListName],
	[Value],
	[Text],
	[Level],
	[SortOrder],
	[DefinitionID],
	[ParentID],
	[Description]
	)
values (
	@ListName,
	@Value,
	@Text,
	@Level,
	@SortOrder,
	@DefinitionID,
	@ParentID,
	@Description  	
	)

select SCOPE_IDENTITY()







GO

create procedure {databaseOwner}{objectQualifier}FindBanners

@PortalId     int,
@BannerTypeId int,
@GroupName    nvarchar(100)

as

select BannerId,
       {objectQualifier}Banners.VendorId,
       BannerName,
       URL,
       'ImageFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Banners.ImageFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       Impressions,
       CPM,
       {objectQualifier}Banners.Views,
       {objectQualifier}Banners.ClickThroughs,
       StartDate,
       EndDate,
       BannerTypeId,
       Description,
       GroupName,
       Criteria,
       {objectQualifier}Banners.Width,
       {objectQualifier}Banners.Height
from {objectQualifier}Banners
inner join {objectQualifier}Vendors on {objectQualifier}Banners.VendorId = {objectQualifier}Vendors.VendorId
left outer join {objectQualifier}Files on {objectQualifier}Banners.ImageFile = 'fileid=' +
convert(varchar,{objectQualifier}Files.FileID)
where  ({objectQualifier}Banners.BannerTypeId = @BannerTypeId or @BannerTypeId is null)
and    ({objectQualifier}Banners.GroupName = @GroupName or @GroupName is null)
and    (({objectQualifier}Vendors.PortalId = @PortalId) or (@PortalId is null and {objectQualifier}Vendors.PortalId is null))
and    ({objectQualifier}Banners.StartDate is null Or getdate() >= {objectQualifier}Banners.StartDate )
and    (  ( Criteria = 1 /* OR */
           and ({objectQualifier}Banners.Impressions >= {objectQualifier}Banners.Views Or {objectQualifier}Banners.Impressions = 0)
           and (getdate() <= {objectQualifier}Banners.EndDate or {objectQualifier}Banners.EndDate is null) )
       or ( Criteria = 0 /* AND */
           and ({objectQualifier}Banners.Impressions >= {objectQualifier}Banners.Views and {objectQualifier}Banners.Impressions <> 0)
           or  (getdate() <= {objectQualifier}Banners.EndDate and {objectQualifier}Banners.EndDate is not null) )  )
order by BannerId



GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetDefaultLanguageByModule
(
	@ModuleList varchar(1000)
)
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @TempList table
	(
		ModuleID int
	)

	DECLARE @ModuleID varchar(10), @Pos int

	SET @ModuleList = LTRIM(RTRIM(@ModuleList))+ ','
	SET @Pos = CHARINDEX(',', @ModuleList, 1)

	IF REPLACE(@ModuleList, ',', '') <> ''
	BEGIN
		WHILE @Pos > 0
		BEGIN
			SET @ModuleID = LTRIM(RTRIM(LEFT(@ModuleList, @Pos - 1)))
			IF @ModuleID <> ''
			BEGIN
				INSERT INTO @TempList (ModuleID) VALUES (CAST(@ModuleID AS int)) 
			END
			SET @ModuleList = RIGHT(@ModuleList, LEN(@ModuleList) - @Pos)
			SET @Pos = CHARINDEX(',', @ModuleList, 1)

		END
	END	

SELECT DISTINCT m.ModuleID, p.DefaultLanguage
FROM            {objectQualifier}Modules  m
INNER JOIN      {objectQualifier}Portals p ON p.PortalID = m.PortalID
WHERE		m.ModuleID in (SELECT ModuleID FROM @TempList)
ORDER BY        m.ModuleID	
		
END







GO

CREATE procedure {databaseOwner}{objectQualifier}AddHostSetting

@SettingName   nvarchar(50),
@SettingValue  nvarchar(256),
@SettingIsSecure bit

as

insert into {objectQualifier}HostSettings (
  SettingName,
  SettingValue,
  SettingIsSecure
) 
values (
  @SettingName,
  @SettingValue,
  @SettingIsSecure
)


GO

CREATE procedure {databaseOwner}{objectQualifier}GetTabByName

@TabName  nvarchar(50),
@PortalId int

as

select TabID, 
TabOrder, 
{objectQualifier}Tabs.PortalID, 
TabName, 
IsVisible, 
ParentId, 
[Level], 
DisableLink, 
Title, 
Description, 
KeyWords, 
IsDeleted, 
Url, 
SkinSrc, 
ContainerSrc, 
TabPath, 
StartDate, 
EndDate,
 'IconFile' = case when {objectQualifier}Files_1.FileName is null then {objectQualifier}Tabs.IconFile else {objectQualifier}Files_1.Folder + {objectQualifier}Files_1.FileName end,
'HasChildren' = case when exists (select 1 from {objectQualifier}Tabs T2 where T2.ParentId = {objectQualifier}Tabs.TabId) then 'true' else 'false' end
from   {objectQualifier}Tabs
left outer join {objectQualifier}Files on {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
LEFT OUTER JOIN {objectQualifier}Files {objectQualifier}Files_1 ON {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,{objectQualifier}Files_1.FileID)
where  TabName = @TabName
and    (({objectQualifier}Tabs.PortalId = @PortalId) or (@PortalId is null AND {objectQualifier}Tabs.PortalId is null))
order by TabID







GO


CREATE procedure {databaseOwner}{objectQualifier}UpdateTab

@TabId              int,
@TabName            nvarchar(50),
@IsVisible          bit,
@DisableLink        bit,
@ParentId           int,
@IconFile           nvarchar(100),
@Title              nvarchar(200),
@Description        nvarchar(500),
@KeyWords           nvarchar(500),
@IsDeleted          bit,
@Url                nvarchar(255),
@SkinSrc            nvarchar(200),
@ContainerSrc       nvarchar(200),
@TabPath            nvarchar(255),
@StartDate          DateTime,
@EndDate            DateTime

as

update {objectQualifier}Tabs
set    TabName            = @TabName,
       IsVisible          = @IsVisible,
       DisableLink        = @DisableLink,
       ParentId           = @ParentId,
       IconFile           = @IconFile,
       Title              = @Title,
       Description        = @Description,
       KeyWords           = @KeyWords,
       IsDeleted          = @IsDeleted,
       Url                = @Url,
       SkinSrc            = @SkinSrc,
       ContainerSrc       = @ContainerSrc,
       TabPath            = @TabPath,
       StartDate          = @StartDate,
       EndDate            = @EndDate
where  TabId = @TabId









GO


CREATE procedure {databaseOwner}{objectQualifier}GetAllTabs

as

select TabID, 
       TabOrder, 
       {objectQualifier}Tabs.PortalID, 
       TabName, 
       IsVisible, 
       ParentId, 
       [Level], 
       'IconFile' = case when {objectQualifier}Files_1.FileName is null then {objectQualifier}Tabs.IconFile else {objectQualifier}Files_1.Folder + {objectQualifier}Files_1.FileName end,
       DisableLink, 
       Title, 
       Description, 
       KeyWords, 
       IsDeleted,
       SkinSrc,
       ContainerSrc,
       TabPath,
       StartDate,
       EndDate,
       'URL' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Tabs.URL else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       'HasChildren' = case when exists (select 1 from {objectQualifier}Tabs T2 where T2.ParentId = {objectQualifier}Tabs.TabId) then 'true' else 'false' end
from   {objectQualifier}Tabs
left outer join {objectQualifier}Files on {objectQualifier}Tabs.URL = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
LEFT OUTER JOIN {databaseOwner}{objectQualifier}Files {objectQualifier}Files_1 ON {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,{objectQualifier}Files_1.FileID)
order by TabOrder, TabName







GO


create procedure {databaseOwner}{objectQualifier}DeleteModuleDefinition

@ModuleDefId int

as

delete
from {objectQualifier}ModuleDefinitions
where  ModuleDefId = @ModuleDefId









GO

CREATE procedure {databaseOwner}{objectQualifier}GetDesktopModuleByFriendlyName

	@FriendlyName    nvarchar(128)

as

select *
from   {objectQualifier}DesktopModules
where  FriendlyName = @FriendlyName


GO

/* -- alter procedure to Retrive Url if it is a file (DNN-611)-- */
CREATE  procedure {databaseOwner}{objectQualifier}GetTab

@TabId    int

as

select TabID, 
TabOrder, 
{objectQualifier}Tabs.PortalID, 
TabName, 
IsVisible, 
ParentId, 
[Level], 
DisableLink, 
Title, 
Description, 
KeyWords, 
IsDeleted, 
'Url'= case when F2.FileName is null then {objectQualifier}Tabs.Url else F2.Folder + F2.FileName end, 
SkinSrc, 
ContainerSrc, 
TabPath, 
StartDate, 
EndDate,
'IconFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Tabs.IconFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
'HasChildren' = case when exists (select 1 from {objectQualifier}Tabs T2 where T2.ParentId = {objectQualifier}Tabs.TabId) then 'true' else 'false' end
from   {objectQualifier}Tabs
left outer join {objectQualifier}Files on {objectQualifier}Tabs.IconFile = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
left outer join {objectQualifier}Files F2 on {objectQualifier}Tabs.Url = 'fileid=' + convert(varchar,F2.FileID)
where  TabId = @TabId


GO

create procedure {databaseOwner}{objectQualifier}GetModuleDefinitionByName

@DesktopModuleId int,    
@FriendlyName    nvarchar(128)

as

select *
from   {objectQualifier}ModuleDefinitions
where  DesktopModuleId = @DesktopModuleId
and    FriendlyName = @FriendlyName


GO

create procedure {databaseOwner}{objectQualifier}GetUrlTracking

@PortalID     int,
@Url          nvarchar(255),
@ModuleId     int

as

select *
from   {objectQualifier}UrlTracking
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))








GO

create procedure {databaseOwner}{objectQualifier}DeleteDesktopModule

@DesktopModuleId int

as

delete
from {objectQualifier}DesktopModules
where  DesktopModuleId = @DesktopModuleId







GO

create procedure {databaseOwner}{objectQualifier}GetDesktopModule

@DesktopModuleId int

as

select *
from   {objectQualifier}DesktopModules
where  DesktopModuleId = @DesktopModuleId








GO


create procedure {databaseOwner}{objectQualifier}UpdateBannerClickThrough

@BannerId int,
@VendorId int

as

update {objectQualifier}Banners
set    ClickThroughs = ClickThroughs + 1
where  BannerId = @BannerId
and    VendorId = @VendorId








GO


create procedure {databaseOwner}{objectQualifier}IsUserInRole
    
@UserId        int,
@RoleId        int,
@PortalId      int

as

select {objectQualifier}UserRoles.UserId,
       {objectQualifier}UserRoles.RoleId
from {objectQualifier}UserRoles
inner join {objectQualifier}Roles on {objectQualifier}UserRoles.RoleId = {objectQualifier}Roles.RoleId
where  {objectQualifier}UserRoles.UserId = @UserId
and    {objectQualifier}UserRoles.RoleId = @RoleId
and    {objectQualifier}Roles.PortalId = @PortalId
and    ({objectQualifier}UserRoles.ExpiryDate >= getdate() or {objectQualifier}UserRoles.ExpiryDate is null)









GO

create procedure {databaseOwner}{objectQualifier}UpdatePortalSetup

@PortalId            int,
@AdministratorId     int,
@AdministratorRoleId int,
@RegisteredRoleId    int,
@SplashTabId         int,
@HomeTabId           int,
@LoginTabId          int,
@UserTabId           int,
@AdminTabId          int

as

update {objectQualifier}Portals
set    AdministratorId = @AdministratorId, 
       AdministratorRoleId = @AdministratorRoleId, 
       RegisteredRoleId = @RegisteredRoleId,
       SplashTabId = @SplashTabId,
       HomeTabId = @HomeTabId,
       LoginTabId = @LoginTabId,
       UserTabId = @UserTabId,
       AdminTabId = @AdminTabId
where  PortalId = @PortalId








GO

create procedure {databaseOwner}{objectQualifier}UpdateModule

@ModuleId               int,
@ModuleTitle            nvarchar(256),
@AllTabs                bit, 
@Header                 text,
@Footer                 text,
@StartDate              datetime,
@EndDate                datetime,
@InheritViewPermissions	bit,
@IsDeleted              bit

as

update {objectQualifier}Modules
set    ModuleTitle = @ModuleTitle,
       AllTabs = @AllTabs,
       Header = @Header,
       Footer = @Footer, 
       StartDate = @StartDate,
       EndDate = @EndDate,
       InheritViewPermissions = @InheritViewPermissions,
       IsDeleted = @IsDeleted
where  ModuleId = @ModuleId








GO

create procedure {databaseOwner}{objectQualifier}UpdateOnlineUser

@UserID 	int,
@PortalID 	int,
@TabID 		int,
@LastActiveDate datetime 

as
BEGIN
	IF EXISTS (SELECT UserID FROM {objectQualifier}UsersOnline WHERE UserID = @UserID and PortalID = @PortalID)
		UPDATE 
			{objectQualifier}UsersOnline
		SET 
			TabID = @TabID,
			LastActiveDate = @LastActiveDate
		WHERE
			UserID = @UserID
			and 
			PortalID = @PortalID
	ELSE
		INSERT INTO
			{objectQualifier}UsersOnline
			(UserID, PortalID, TabID, CreationDate, LastActiveDate) 
		VALUES
			(@UserId, @PortalID, @TabID, GetDate(), @LastActiveDate)

END








GO


create procedure {databaseOwner}{objectQualifier}GetUserByUsername

@PortalId int,
@Username nvarchar(100)

as
 
select U.UserId,
       UP.PortalID,
       U.Username,
       'FullName' = U.FirstName + ' ' + U.LastName,
       U.FirstName,
       U.LastName,
       U.IsSuperUser
from {objectQualifier}Users U
left outer join {objectQualifier}UserPortals UP On U.UserId = UP.UserId
where  Username = @Username
and    (UP.PortalId = @PortalId or U.IsSuperUser = 1 or @PortalId is null)






GO

CREATE procedure {databaseOwner}{objectQualifier}GetHostSettings
as
select SettingName,
       SettingValue,
       SettingIsSecure
from {objectQualifier}HostSettings


GO

create procedure {databaseOwner}{objectQualifier}UpdateModuleOrder

@TabId              int,
@ModuleId           int,
@ModuleOrder        int,
@PaneName           nvarchar(50)

as

update {objectQualifier}TabModules
set    ModuleOrder = @ModuleOrder,
       PaneName = @PaneName
where  TabId = @TabId
and    ModuleId = @ModuleId








GO


CREATE procedure {databaseOwner}{objectQualifier}GetModuleDefinitions

@DesktopModuleId int

as

select *
from   {databaseOwner}{objectQualifier}ModuleDefinitions
where  DesktopModuleId = @DesktopModuleId or @DesktopModuleId = -1









GO

create procedure {databaseOwner}{objectQualifier}UpdateUser

@UserId         int,
@FirstName	nvarchar(50),
@LastName	nvarchar(50),
@Email          nvarchar(256)

as

update {objectQualifier}Users
set    FirstName = @FirstName,
       LastName	 = @LastName,
       Email = @Email
where  UserId = @UserId


GO

create procedure {databaseOwner}{objectQualifier}UpdateUrlTracking

@PortalID     int,
@Url          nvarchar(255),
@LogActivity  bit,
@TrackClicks  bit,
@ModuleId     int,
@NewWindow    bit

as

update {objectQualifier}UrlTracking
set    LogActivity = @LogActivity,
       TrackClicks = @TrackClicks,
       NewWindow = @NewWindow
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))








GO


create procedure {databaseOwner}{objectQualifier}DeletePortalInfo

@PortalId int

as

delete
from {objectQualifier}Portals
where  PortalId = @PortalId









GO


create procedure {databaseOwner}{objectQualifier}UpdateTabOrder

@TabId    int,
@TabOrder int,
@Level    int,
@ParentId int

as

update {objectQualifier}Tabs
set    TabOrder = @TabOrder,
       Level = @Level,
       ParentId = @ParentId
where  TabId = @TabId









GO

CREATE procedure {databaseOwner}{objectQualifier}GetSuperUsers

as

select U.*,
       'PortalId' = -1,
       'FullName' = U.FirstName + ' ' + U.LastName
from   {objectQualifier}Users U
where  U.IsSuperUser = 1






GO

CREATE procedure {databaseOwner}{objectQualifier}AddDesktopModule
    
	@ModuleName			nvarchar(128),
	@FolderName			nvarchar(128),
	@FriendlyName		nvarchar(128),
	@Description		nvarchar(2000),
	@Version			nvarchar(8),
	@IsPremium			bit,
	@IsAdmin			bit,
	@BusinessController nvarchar(200),
	@SupportedFeatures	int

as

insert into {objectQualifier}DesktopModules (
	ModuleName,
	FolderName,
	FriendlyName,
	Description,
	Version,
	IsPremium,
	IsAdmin,
	BusinessControllerClass,
	SupportedFeatures
)
values (
	@ModuleName,
	@FolderName,
	@FriendlyName,
	@Description,
	@Version,
	@IsPremium,
	@IsAdmin,
	@BusinessController,
	@SupportedFeatures
)

select SCOPE_IDENTITY()


GO


create procedure {databaseOwner}{objectQualifier}DeleteBanner

@BannerId int

as

delete
from {objectQualifier}Banners
where  BannerId = @BannerId









GO


CREATE procedure {databaseOwner}{objectQualifier}AddTab

@PortalId           int,
@TabName            nvarchar(50),
@IsVisible          bit,
@DisableLink        bit,
@ParentId           int,
@IconFile           nvarchar(100),
@Title              nvarchar(200),
@Description        nvarchar(500),
@KeyWords           nvarchar(500),
@Url                nvarchar(255),
@SkinSrc            nvarchar(200),
@ContainerSrc       nvarchar(200),
@TabPath            nvarchar(255),
@StartDate          DateTime,
@EndDate            DateTime

as

insert into {objectQualifier}Tabs (
    PortalId,
    TabName,
    IsVisible,
    DisableLink,
    ParentId,
    IconFile,
    Title,
    Description,
    KeyWords,
    IsDeleted,
    Url,
    SkinSrc,
    ContainerSrc,
    TabPath,
    StartDate,
    EndDate
)
values (
    @PortalId,
    @TabName,
    @IsVisible,
    @DisableLink,
    @ParentId,
    @IconFile,
    @Title,
    @Description,
    @KeyWords,
    0,
    @Url,
    @SkinSrc,
    @ContainerSrc,
    @TabPath,
    @StartDate,
    @EndDate
)

select SCOPE_IDENTITY()








GO

CREATE procedure {databaseOwner}{objectQualifier}UpdateVendor

@VendorId	int,
@VendorName nvarchar(50),
@Unit	 	nvarchar(50),
@Street 	nvarchar(50),
@City		nvarchar(50),
@Region	    nvarchar(50),
@Country	nvarchar(50),
@PostalCode	nvarchar(50),
@Telephone	nvarchar(50),
@Fax		nvarchar(50),
@Cell		nvarchar(50),
@Email		nvarchar(50),
@Website	nvarchar(100),
@FirstName	nvarchar(50),
@LastName	nvarchar(50),
@UserName   nvarchar(100),
@LogoFile   nvarchar(100),
@KeyWords   text,
@Authorized bit

as

update {objectQualifier}Vendors
set    VendorName    = @VendorName,
       Unit          = @Unit,
       Street        = @Street,
       City          = @City,
       Region        = @Region,
       Country       = @Country,
       PostalCode    = @PostalCode,
       Telephone     = @Telephone,
       Fax           = @Fax,
       Cell          = @Cell,
       Email         = @Email,
       Website       = @Website,
       FirstName     = @FirstName,
       LastName      = @LastName,
       CreatedByUser = @UserName,
       CreatedDate   = getdate(),
       LogoFile      = @LogoFile,
       KeyWords      = @KeyWords,
       Authorized    = @Authorized
where  VendorId = @VendorId







GO


create procedure {databaseOwner}{objectQualifier}GetHostSetting

@SettingName nvarchar(50)

as

select SettingValue
from {objectQualifier}HostSettings
where  SettingName = @SettingName









GO

create procedure {databaseOwner}{objectQualifier}GetRoleByName

@PortalId int,
@RoleName nvarchar(50)

as

select RoleId,
       PortalId,
       RoleName,
       Description,
       ServiceFee,
       BillingPeriod,
       BillingFrequency,
       TrialFee,
       TrialPeriod,
       TrialFrequency,
       IsPublic,
       AutoAssignment
from {objectQualifier}Roles
where  PortalId = @PortalId and RoleName = @RoleName








GO

CREATE procedure {databaseOwner}{objectQualifier}GetListEntries

@ListName nvarchar(50),
@ParentKey nvarchar(150),
@EntryID int,
@DefinitionID int,
@Value nvarchar(200)

as
IF @ParentKey=''
Begin
	select 
	E.[EntryID],
	E.[ListName],
	E.[Value],
	E.[Text],
	E.[Level],
	E.[SortOrder],
	E.[DefinitionID],
	E.[ParentID],
	E.[Description], 	
	E.[ListName] + '.' + E.[Value] As [Key],	
	E.[ListName] + '.' + E.[Text] As [DisplayName],
	IsNull((SELECT [ListName] + '.' + [Value] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [ParentKey],
	IsNull((SELECT [ListName] + '.' + [Text] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [Parent],
	IsNull((SELECT [ListName] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]),'') As [ParentList],		
	(SELECT COUNT(DISTINCT [ParentID]) FROM {objectQualifier}Lists (nolock) WHERE [ParentID] = E.[EntryID]) As HasChildren
	From {objectQualifier}Lists E (nolock)
	Where (E.[ListName] = @ListName or @ListName='')
	and (E.[DefinitionID]=@DefinitionID or @DefinitionID = -1)
	and (E.[EntryID]=@EntryID or @EntryID = -1)
	and (E.[Value]=@Value or @Value = '')
	Order By E.[Level], E.[ListName], E.[SortOrder], E.[Text]
End
Else
Begin

	DECLARE @ParentListName nvarchar(50)
	DECLARE @ParentValue nvarchar(100)
	SET @ParentListName = LEFT(@ParentKey, CHARINDEX( '.', @ParentKey) - 1)
	SET @ParentValue = RIGHT(@ParentKey, LEN(@ParentKey) -  CHARINDEX( '.', @ParentKey))
	select 
	E.[EntryID],
	E.[ListName],
	E.[Value],
	E.[Text],
	E.[Level],
	E.[SortOrder],
	E.[DefinitionID],
	E.[ParentID],
	E.[Description], 	
	E.[ListName] + '.' + E.[Value] As [Key],	
	E.[ListName] + '.' + E.[Text] As [DisplayName],
	IsNull((SELECT [ListName] + '.' + [Value] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [ParentKey],
	IsNull((SELECT [ListName] + '.' + [Text] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]), '') As [Parent],
	IsNull((SELECT [ListName] FROM {objectQualifier}Lists WHERE [EntryID] = E.[ParentID]),'') As [ParentList],	
	(SELECT COUNT(DISTINCT [ParentID]) FROM {objectQualifier}Lists (nolock) WHERE [ParentID] = E.[EntryID]) As HasChildren
	From {objectQualifier}Lists E (nolock)
	where  [ListName] = @ListName 
	and (E.[DefinitionID]=@DefinitionID or @DefinitionID = -1)
	and (E.[EntryID]=@EntryID or @EntryID = -1)
	and (E.[Value]=@Value or @Value = '')
	and [ParentID] = (SELECT [EntryID] From {objectQualifier}Lists Where [ListName] = @ParentListName And [Value] = @ParentValue)
	Order By E.[Level], E.[ListName], E.[SortOrder], E.[Text]

End







GO

CREATE procedure {databaseOwner}{objectQualifier}AddModuleDefinition

	@DesktopModuleId int,    
	@FriendlyName    nvarchar(128),
	@DefaultCacheTime int

as

insert into {objectQualifier}ModuleDefinitions (
  DesktopModuleId,
  FriendlyName,
  DefaultCacheTime
)
values (
  @DesktopModuleId,
  @FriendlyName,
  @DefaultCacheTime
)

select SCOPE_IDENTITY()


GO



CREATE procedure {databaseOwner}{objectQualifier}DeleteListEntryByID

@EntryId   int,
@DeleteChild bit

as

Delete
From {objectQualifier}Lists
Where  [EntryID] = @EntryID

If @DeleteChild = 1
Begin
	Delete 
	From {objectQualifier}Lists
	Where [ParentID] = @EntryID
End









GO


CREATE procedure {databaseOwner}{objectQualifier}UpdateRole

@RoleId           int,
@Description      nvarchar(1000),
@ServiceFee       money,
@BillingPeriod    int,
@BillingFrequency char(1),
@TrialFee         money,
@TrialPeriod      int,
@TrialFrequency   char(1),
@IsPublic         bit,
@AutoAssignment   bit

as

update {databaseOwner}{objectQualifier}Roles
set    Description = @Description,
       ServiceFee = @ServiceFee,
       BillingPeriod = @BillingPeriod,
       BillingFrequency = @BillingFrequency,
       TrialFee = @TrialFee,
       TrialPeriod = @TrialPeriod,
       TrialFrequency = @TrialFrequency,
       IsPublic = @IsPublic,
       AutoAssignment = @AutoAssignment
where  RoleId = @RoleId









GO


create procedure {databaseOwner}{objectQualifier}DeleteTab

@TabId int

as

delete
from {objectQualifier}Tabs
where  TabId = @TabId








GO

create procedure {databaseOwner}{objectQualifier}GetTabModuleOrder

@TabId    int, 
@PaneName nvarchar(50)

as

select *
from   {objectQualifier}TabModules 
where  TabId = @TabId 
and    PaneName = @PaneName
order by ModuleOrder








GO



CREATE procedure {databaseOwner}{objectQualifier}DeleteList

@ListName nvarchar(50),
@ParentKey nvarchar(150)

as

DECLARE @EntryID int

If @ParentKey = '' 
Begin
	-- need to store entries which to be deleted to clean up their sub entries
	DECLARE allentry_cursor CURSOR FOR
	SELECT [EntryID] FROM {objectQualifier}Lists Where  [ListName] = @ListName	
	-- then delete their sub entires
	OPEN allentry_cursor
	FETCH NEXT FROM allentry_cursor INTO @EntryID
	While @@FETCH_STATUS = 0
	Begin	
		Delete {objectQualifier}Lists Where [ParentID] = @EntryID
   		FETCH NEXT FROM allentry_cursor INTO @EntryID
	End
	-- Delete entries belong to this list
	Delete {objectQualifier}Lists
	Where  [ListName] = @ListName
End
Else
Begin

	DECLARE @ParentListName nvarchar(50)
	DECLARE @ParentValue nvarchar(100)
	SET @ParentListName = LEFT(@ParentKey, CHARINDEX( '.', @ParentKey) - 1)
	SET @ParentValue = RIGHT(@ParentKey, LEN(@ParentKey) -  CHARINDEX( '.', @ParentKey))

	-- need to store entries which to be deleted to clean up their sub entries
	DECLARE selentry_cursor CURSOR FOR
	SELECT [EntryID] FROM {objectQualifier}Lists Where  [ListName] = @ListName And
	[ParentID] = (SELECT [EntryID] From {objectQualifier}Lists Where [ListName] = @ParentListName And [Value] = @ParentValue)
	-- delete their sub entires
	OPEN selentry_cursor
	FETCH NEXT FROM selentry_cursor INTO @EntryID
	While @@FETCH_STATUS = 0
	Begin	
		Delete {objectQualifier}Lists Where [ParentID] = @EntryID
   		FETCH NEXT FROM selentry_cursor INTO @EntryID
	End
	-- delete entry list
	Delete {objectQualifier}Lists 
	where  [ListName] = @ListName And
	[ParentID] = (SELECT [EntryID] From {objectQualifier}Lists Where [ListName] = @ParentListName And [Value] = @ParentValue)	
End









GO




create procedure {databaseOwner}{objectQualifier}GetAllModules

as

select *
from   {databaseOwner}{objectQualifier}Modules








GO

create procedure {databaseOwner}{objectQualifier}AddTabModule
    
@TabId                         int,
@ModuleId                      int,
@ModuleOrder                   int,
@PaneName                      nvarchar(50),
@CacheTime                     int,
@Alignment                     nvarchar(10),
@Color                         nvarchar(20),
@Border                        nvarchar(1),
@IconFile                      nvarchar(100),
@Visibility                    int,
@ContainerSrc                  nvarchar(200),
@DisplayTitle                  bit,
@DisplayPrint                  bit,
@DisplaySyndicate              bit

as

insert into {objectQualifier}TabModules ( 
  TabId,
  ModuleId,
  ModuleOrder,
  PaneName,
  CacheTime,
  Alignment,
  Color,
  Border,
  IconFile,
  Visibility,
  ContainerSrc,
  DisplayTitle,
  DisplayPrint,
  DisplaySyndicate
)
values (
  @TabId,
  @ModuleId,
  @ModuleOrder,
  @PaneName,
  @CacheTime,
  @Alignment,
  @Color,
  @Border,
  @IconFile,
  @Visibility,
  @ContainerSrc,
  @DisplayTitle,
  @DisplayPrint,
  @DisplaySyndicate
)







GO

CREATE  procedure {databaseOwner}{objectQualifier}UpdateDesktopModule

	@DesktopModuleId	int,    
	@ModuleName			nvarchar(128),
	@FolderName			nvarchar(128),
	@FriendlyName		nvarchar(128),
	@Description		nvarchar(2000),
	@Version			nvarchar(8),
	@IsPremium			bit,
	@IsAdmin			bit,
	@BusinessController nvarchar(200),
	@SupportedFeatures	int

as

update {objectQualifier}DesktopModules
set    
	ModuleName    = @ModuleName,
	FolderName    = @FolderName,
	FriendlyName    = @FriendlyName,
	Description     = @Description,
	Version         = @Version,
	IsPremium       = @IsPremium,
	IsAdmin         = @IsAdmin,
	BusinessControllerClass = @BusinessController,
	SupportedFeatures    = @SupportedFeatures
where  DesktopModuleId = @DesktopModuleId


GO

create procedure {databaseOwner}{objectQualifier}DeleteModule

@ModuleId   int

as

delete
from   {objectQualifier}Modules 
where  ModuleId = @ModuleId







GO

create procedure {databaseOwner}{objectQualifier}GetRole

@RoleId   int,
@PortalId int

as

select RoleId,
       PortalId,
       RoleName,
       Description,
       ServiceFee,
       BillingPeriod,
       BillingFrequency,
       TrialFee,
       TrialPeriod,
       TrialFrequency,
       IsPublic,
       AutoAssignment
from   {objectQualifier}Roles
where  RoleId = @RoleId
and    PortalId = @PortalId








GO

create procedure {databaseOwner}{objectQualifier}DeleteUsersOnline

	@TimeWindow	int
	
as
	-- Clean up the anonymous users table
	DELETE from {objectQualifier}AnonymousUsers WHERE LastActiveDate < DateAdd(minute, -@TimeWindow, GetDate())	

	-- Clean up the users online table
	DELETE from {objectQualifier}UsersOnline WHERE LastActiveDate < DateAdd(minute, -@TimeWindow, GetDate())	








GO

create procedure {databaseOwner}{objectQualifier}AddUrlTracking

@PortalID     int,
@Url          nvarchar(255),
@UrlType      char(1),
@LogActivity  bit,
@TrackClicks  bit,
@ModuleId     int,
@NewWindow    bit

as

insert into {objectQualifier}UrlTracking (
  PortalID,
  Url,
  UrlType,
  Clicks,
  LastClick,
  CreatedDate,
  LogActivity,
  TrackClicks,
  ModuleId,
  NewWindow
)
values (
  @PortalID,
  @Url,
  @UrlType,
  0,
  null,
  getdate(),
  @LogActivity,
  @TrackClicks,
  @ModuleId,
  @NewWindow
)








GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalByPortalAliasID

@PortalAliasId  int

as

select {objectQualifier}Portals.PortalID,
       {objectQualifier}Portals.PortalName,
       'LogoFile' = case when {objectQualifier}Files.FileName is null then {objectQualifier}Portals.LogoFile else {objectQualifier}Files.Folder + {objectQualifier}Files.FileName end,
       {objectQualifier}Portals.FooterText,
       {objectQualifier}Portals.ExpiryDate,
       {objectQualifier}Portals.UserRegistration,
       {objectQualifier}Portals.BannerAdvertising,
       {objectQualifier}Portals.AdministratorID,
       {objectQualifier}Portals.Currency,
       {objectQualifier}Portals.HostFee,
       {objectQualifier}Portals.HostSpace,
       {objectQualifier}Portals.AdministratorRoleID,
       {objectQualifier}Portals.RegisteredRoleID,
       {objectQualifier}Portals.Description,
       {objectQualifier}Portals.KeyWords,
       'BackGroundFile' = case when {objectQualifier}Files2.FileName is null then {objectQualifier}Portals.BackGroundFile else {objectQualifier}Files2.Folder + {objectQualifier}Files2.FileName end,
       {objectQualifier}Portals.GUID,
       {objectQualifier}Portals.PaymentProcessor,
       {objectQualifier}Portals.ProcessorPassword,
       {objectQualifier}Portals.SiteLogHistory,
       {objectQualifier}Portals.SplashTabID,
       {objectQualifier}Portals.HomeTabID,
       {objectQualifier}Portals.LoginTabID,
       {objectQualifier}Portals.UserTabID,
       {objectQualifier}Portals.DefaultLanguage,
       {objectQualifier}Portals.TimeZoneOffset,
       {objectQualifier}Portals.AdminTabID,
       {objectQualifier}Portals.HomeDirectory, 
       PA.HTTPAlias, 
       PA.PortalAliasID, 
       'SuperTabId' = ( select TabId from {objectQualifier}Tabs where PortalId is null and ParentId is null )
from {objectQualifier}Portals
INNER JOIN {objectQualifier}PortalAlias PA ON {objectQualifier}Portals.PortalID = PA.PortalID
left outer join {objectQualifier}Files on {objectQualifier}Portals.LogoFile = 'fileid=' + convert(varchar,{objectQualifier}Files.FileID)
left outer join {objectQualifier}Files as {objectQualifier}Files2 on {objectQualifier}Portals.BackGroundFile = 'fileid=' +convert(varchar,{objectQualifier}Files2.FileID)
where PA.PortalAliasId = @PortalAliasId







GO

CREATE procedure {databaseOwner}{objectQualifier}GetSearchResultModules

@PortalID int

AS

SELECT     
		TM.TabID, 
		T.TabName  AS SearchTabName
FROM	{objectQualifier}Modules M
INNER JOIN	{objectQualifier}ModuleDefinitions MD ON MD.ModuleDefID = M.ModuleDefID 
INNER JOIN	{objectQualifier}TabModules TM ON TM.ModuleID = M.ModuleID 
INNER JOIN	{objectQualifier}Tabs T ON T.TabID = TM.TabID
WHERE	MD.FriendlyName = N'Search Results'
	AND T.PortalID = @PortalID
	AND T.IsDeleted = 0




GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetSearchItems

@PortalId int,
@TabId int,
@ModuleId int

AS

SELECT si.*,
       'AuthorName' = u.FirstName + ' ' + u.LastName,
       t.TabId
FROM   {databaseOwner}{objectQualifier}SearchItem si
	LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users u ON si.Author = u.UserID
	INNER JOIN {databaseOwner}{objectQualifier}Modules m ON si.ModuleId = m.ModuleID 
	INNER JOIN {databaseOwner}{objectQualifier}TabModules tm ON m.ModuleId = tm.ModuleID 
	INNER JOIN {databaseOwner}{objectQualifier}Tabs t ON tm.TabID = t.TabID
	INNER JOIN {databaseOwner}{objectQualifier}Portals p ON t.PortalID = p.PortalID
WHERE (p.PortalId = @PortalId or @PortalId is null)
	AND   (t.TabId = @TabId or @TabId is null)
	AND   (m.ModuleId = @ModuleId or @ModuleId is null)
ORDER BY PubDate DESC

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetFolderPermissionsByFolderPath
	@PortalID int,
	@FolderPath varchar(300), 
	@PermissionID int
AS

SELECT
	FP.[FolderPermissionID],
	F.[FolderID],
	F.[FolderPath],
	P.[PermissionID],
	FP.[RoleID],
	case FP.RoleID
		when -1 then 'All Users'
		when -2 then 'Superuser'		
		when -3 then 'Unauthenticated Users'
		else 	R.RoleName
	end
	'RoleName',
	FP.[AllowAccess],
	P.[PermissionCode],
	P.[PermissionKey],
	P.[PermissionName]
FROM
	{objectQualifier}FolderPermission FP
LEFT JOIN {objectQualifier}Folders F ON	FP.FolderID = F.FolderID	
LEFT JOIN {objectQualifier}Permission P ON	FP.PermissionID = P.PermissionID
LEFT JOIN {objectQualifier}Roles R ON	FP.RoleID = R.RoleID
WHERE
	( (F.[FolderPath] = @FolderPath and ((F.[PortalID] = @PortalID) or (F.[PortalID] is null and @PortalID is null)))
          or (F.FolderPath is null and P.PermissionCode = 'SYSTEM_FOLDER') )
AND	(P.[PermissionID] = @PermissionID or @PermissionID = -1)





GO

create procedure {databaseOwner}{objectQualifier}GetPortalTabModules

@PortalId int, 
@TabId int

as

select M.ModuleID,
       M.ModuleDefID,
       M.ModuleTitle,
       M.AllTabs,
       M.IsDeleted,
       M.InheritViewPermissions,
       M.Header,
       M.Footer,
       M.StartDate,
       M.EndDate,
       M.PortalID,
       TM.TabModuleId,
       TM.TabId,
       TM.PaneName,
       TM.ModuleOrder,
       TM.CacheTime,
       TM.Alignment,
       TM.Color,
       TM.Border,
       TM.Visibility,
       TM.ContainerSrc,
       TM.DisplayTitle,
       TM.DisplayPrint,
       TM.DisplaySyndicate,
       'IconFile' = case when F.FileName is null then TM.IconFile else F.Folder + F.FileName end,
       DM.*,
       MC.ModuleControlId,
       MC.ControlSrc,
       MC.ControlType,
       MC.ControlTitle,
       MC.HelpURL
from {objectQualifier}Modules M
inner join {objectQualifier}TabModules TM on M.ModuleId = TM.ModuleId
inner join {objectQualifier}Tabs T on TM.TabId = T.TabId
inner join {objectQualifier}ModuleDefinitions MD on M.ModuleDefId = MD.ModuleDefId
inner join {objectQualifier}DesktopModules DM on MD.DesktopModuleId = DM.DesktopModuleId
inner join {objectQualifier}ModuleControls MC on MD.ModuleDefId = MC.ModuleDefId
left outer join {objectQualifier}Files F on TM.IconFile = 'fileid=' + convert(varchar,F.FileID)
where  TM.TabId = @TabId
and    ControlKey is null
order by TM.ModuleOrder







GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPortals

as

select P.*,
       'LogoFile' = case when F1.FileName is null then P.LogoFile else F1.Folder + F1.FileName end,
       'BackGroundFile' = case when F2.FileName is null then P.BackGroundFile else F2.Folder + F2.FileName end,
       'Users' = ( select count(*) from {objectQualifier}UserPortals where {objectQualifier}UserPortals.PortalId = P.PortalId )
from {objectQualifier}Portals P
left outer join {objectQualifier}Files F1 on P.LogoFile = 'fileid=' + convert(varchar,F1.FileID)
left outer join {objectQualifier}Files F2 on P.BackGroundFile = 'fileid=' + convert(varchar,F2.FileID)
order by P.PortalName






GO


create procedure {databaseOwner}{objectQualifier}GetCurrencies

as

select Code,
       Description
from {objectQualifier}CodeCurrency





GO
ALTER TABLE {databaseOwner}[{objectQualifier}Version] ADD CONSTRAINT [IX_{objectQualifier}Version] UNIQUE NONCLUSTERED  ([Major], [Minor], [Build])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SystemMessages] ADD CONSTRAINT [IX_{objectQualifier}SystemMessages] UNIQUE NONCLUSTERED  ([MessageName], [PortalID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD CONSTRAINT [IX_{objectQualifier}Users] UNIQUE NONCLUSTERED  ([Username])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}VendorClassification] ADD CONSTRAINT [IX_{objectQualifier}VendorClassification] UNIQUE NONCLUSTERED  ([VendorId], [ClassificationId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] ADD CONSTRAINT [IX_{objectQualifier}UrlTracking] UNIQUE NONCLUSTERED  ([PortalID], [Url], [ModuleId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions] ADD CONSTRAINT [IX_{objectQualifier}ModuleDefinitions] UNIQUE NONCLUSTERED  ([FriendlyName])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules] ADD CONSTRAINT [IX_{objectQualifier}PortalDesktopModules] UNIQUE NONCLUSTERED  ([PortalID], [DesktopModuleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Vendors] ADD CONSTRAINT [IX_{objectQualifier}Vendors] UNIQUE NONCLUSTERED  ([PortalId], [VendorName])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD CONSTRAINT [IX_{objectQualifier}DesktopModules_ModuleName] UNIQUE NONCLUSTERED  ([ModuleName])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD CONSTRAINT [IX_{objectQualifier}RoleName] UNIQUE NONCLUSTERED  ([PortalID], [RoleName])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Urls] ADD CONSTRAINT [IX_{objectQualifier}Urls] UNIQUE NONCLUSTERED  ([Url], [PortalID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD CONSTRAINT [IX_{objectQualifier}TabModules] UNIQUE NONCLUSTERED  ([TabID], [ModuleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] ADD CONSTRAINT [IX_{objectQualifier}ModuleControls] UNIQUE NONCLUSTERED  ([ModuleDefID], [ControlKey], [ControlSrc])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] ADD CONSTRAINT [IX_{objectQualifier}PortalAlias] UNIQUE NONCLUSTERED  ([HTTPAlias])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Tabs] FOREIGN KEY ([TabID]) REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleSettings] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}ModuleSettings_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}DesktopModules] FOREIGN KEY ([DesktopModuleID]) REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Users] FOREIGN KEY ([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Urls] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Urls_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}SiteLog] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}SiteLog_{objectQualifier}Portals] FOREIGN KEY ([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Files] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}Portals] FOREIGN KEY ([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}ModuleDefinitions_{objectQualifier}DesktopModules] FOREIGN KEY ([DesktopModuleID]) REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItem] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}SearchItem_{objectQualifier}Modules] FOREIGN KEY ([ModuleId]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}ModuleDefinitions] FOREIGN KEY ([ModuleDefID]) REFERENCES {databaseOwner}[{objectQualifier}ModuleDefinitions] ([ModuleDefID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Tabs] FOREIGN KEY ([ParentId]) REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID]) NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleHistory] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}ScheduleHistory_{objectQualifier}Schedule] FOREIGN KEY ([ScheduleID]) REFERENCES {databaseOwner}[{objectQualifier}Schedule] ([ScheduleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Permission] FOREIGN KEY ([PermissionID]) REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID]) ON DELETE CASCADE,
CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Tabs] FOREIGN KEY ([TabID]) REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID]) ON DELETE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}SystemMessages] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}SystemMessages_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Portals] FOREIGN KEY ([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Users] FOREIGN KEY ([UserId]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Affiliates] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Affiliates_{objectQualifier}Vendors] FOREIGN KEY ([VendorId]) REFERENCES {databaseOwner}[{objectQualifier}Vendors] ([VendorId]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}TabModuleSettings] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}TabModuleSettings_{objectQualifier}TabModules] FOREIGN KEY ([TabModuleID]) REFERENCES {databaseOwner}[{objectQualifier}TabModules] ([TabModuleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Vendors] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Vendor_{objectQualifier}Portals] FOREIGN KEY ([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}ScheduleItemSettings_{objectQualifier}Schedule] FOREIGN KEY ([ScheduleID]) REFERENCES {databaseOwner}[{objectQualifier}Schedule] ([ScheduleID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}UrlTracking_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Roles_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}AnonymousUsers_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Roles] FOREIGN KEY ([RoleID]) REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Users] FOREIGN KEY ([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Banners] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Banner_{objectQualifier}Vendor] FOREIGN KEY ([VendorId]) REFERENCES {databaseOwner}[{objectQualifier}Vendors] ([VendorId]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}ModuleControls_{objectQualifier}ModuleDefinitions] FOREIGN KEY ([ModuleDefID]) REFERENCES {databaseOwner}[{objectQualifier}ModuleDefinitions] ([ModuleDefID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Skins] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Skins_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}VendorClassification] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}VendorClassification_{objectQualifier}Classification] FOREIGN KEY ([ClassificationId]) REFERENCES {databaseOwner}[{objectQualifier}Classification] ([ClassificationId]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}VendorClassification_{objectQualifier}Vendors] FOREIGN KEY ([VendorId]) REFERENCES {databaseOwner}[{objectQualifier}Vendors] ([VendorId]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Classification] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Classification_{objectQualifier}Classification] FOREIGN KEY ([ParentId]) REFERENCES {databaseOwner}[{objectQualifier}Classification] ([ClassificationId]) NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}Profile] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Portals] FOREIGN KEY ([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE NOT FOR REPLICATION,
CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Users] FOREIGN KEY ([UserId]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}UrlLog] WITH NOCHECK ADD
CONSTRAINT [FK_{objectQualifier}UrlLog_{objectQualifier}UrlTracking] FOREIGN KEY ([UrlTrackingID]) REFERENCES {databaseOwner}[{objectQualifier}UrlTracking] ([UrlTrackingID]) ON DELETE CASCADE NOT FOR REPLICATION
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] ADD
CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogTypes] FOREIGN KEY ([LogTypeKey]) REFERENCES {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey]),
CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogConfig] FOREIGN KEY ([LogConfigID]) REFERENCES {databaseOwner}[{objectQualifier}EventLogConfig] ([ID])
ALTER TABLE {databaseOwner}[{objectQualifier}EventLogConfig] ADD
CONSTRAINT [FK_EventLogConfig_EventLogTypes] FOREIGN KEY ([LogTypeKey]) REFERENCES {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey])
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] ADD
CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Folders] FOREIGN KEY ([FolderID]) REFERENCES {databaseOwner}[{objectQualifier}Folders] ([FolderID]) ON DELETE CASCADE,
CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Permission] FOREIGN KEY ([PermissionID]) REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID]) ON DELETE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD
CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] ADD
CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Modules] FOREIGN KEY ([ModuleID]) REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID]) ON DELETE CASCADE,
CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Permission] FOREIGN KEY ([PermissionID]) REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID]) ON DELETE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] ADD
CONSTRAINT [FK_{objectQualifier}PortalAlias_{objectQualifier}Portals] FOREIGN KEY ([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItemWord] ADD
CONSTRAINT [FK_{objectQualifier}SearchItemWord_{objectQualifier}SearchItem] FOREIGN KEY ([SearchItemID]) REFERENCES {databaseOwner}[{objectQualifier}SearchItem] ([SearchItemID]) ON DELETE CASCADE ON UPDATE CASCADE,
CONSTRAINT [FK_{objectQualifier}SearchItemWord_{objectQualifier}SearchWord] FOREIGN KEY ([SearchWordsID]) REFERENCES {databaseOwner}[{objectQualifier}SearchWord] ([SearchWordsID]) ON DELETE CASCADE ON UPDATE CASCADE
ALTER TABLE {databaseOwner}[{objectQualifier}SearchItemWordPosition] ADD
CONSTRAINT [FK_{objectQualifier}SearchItemWordPosition_{objectQualifier}SearchItemWord] FOREIGN KEY ([SearchItemWordID]) REFERENCES {databaseOwner}[{objectQualifier}SearchItemWord] ([SearchItemWordID]) ON DELETE CASCADE ON UPDATE CASCADE
GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/